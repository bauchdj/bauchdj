<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Insights on coding and beyond. Explore my world.</title><description>Explore the world of web development and beyond with Flavien Bonvin. From coding to coffee machines, productivity tools to life adventures, discover Flavien&apos;s insights and passions.</description><link>https://flavien-bonvin.vercel.app/</link><item><title>What Makes the US ANSI Keyboard the Best Layout for Developers ?</title><link>https://flavien-bonvin.vercel.app/articles/what-makes-the-us-ansi-keyboard-is-the-best-layout-for-developers/</link><guid isPermaLink="true">https://flavien-bonvin.vercel.app/articles/what-makes-the-us-ansi-keyboard-is-the-best-layout-for-developers/</guid><description>US ANSI keyboard is the best keyboard layout for developer. Switching to it will improve productivity and will make your life easier</description><pubDate>Mon, 17 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It seems like the whole world is fighting to know which keyboard layout is the best. Every country has its own adaptation with a few changes. However, there is one clear winner for developers, the US ANSI QWERTY layout.&lt;/p&gt;
&lt;p&gt;Keyboards are the main way we interact with computers and others, yet we don&apos;t think much about them. How strange?&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;What&apos;s a keyboard layout?&lt;/h2&gt;
&lt;p&gt;Before diving into why the QWERTY layout is the best for developers, I feel like we need to discuss keyboard layouts.&lt;/p&gt;
&lt;p&gt;There are many keyboard layouts, they could be “official” like the QWERTY in the US or Japan (and other countries), the AZERTY in France or the Thai Kedmanee in Thailand. Those layouts are broadly available in computers, smartphones settings or third party devices.&lt;/p&gt;
&lt;p&gt;Besides that, there are “unofficial” keyboard layouts that have been developed over the years but are hard, if not impossible, to find in devices you can buy online. Most of them are used by a few people that takes typing very seriously.&lt;/p&gt;
&lt;h3&gt;Why so many layouts?&lt;/h3&gt;
&lt;p&gt;In a world where technology is pretty standardized (internet without standardization would be a mess) it can seem strange that our keyboard aren&apos;t.&lt;/p&gt;
&lt;p&gt;In a way it makes sense, keyboards predated computers and are present in the world for quite some time now. This is because computers keyboards are the little brothers of the typewriters.&lt;/p&gt;
&lt;p&gt;Henry Mill got a patent for a typewriter in… 1714. Keyboards have been around for 300 years. At the time, the world was less standardized, and it makes sense that different countries ended up with different layout.&lt;/p&gt;
&lt;p&gt;Besides that, languages are vastly different and having one layout for everybody would not be possible.&lt;/p&gt;
&lt;p&gt;It also made sense that the first computers adopted the layout of the typewriter, since it was known by people. Computers offered more options than the typewriter, and the layout evolved with time to become what we know today.&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=qLAqT2U68h4&lt;/p&gt;
&lt;h3&gt;Three main keyboard family&lt;/h3&gt;
&lt;p&gt;Layouts are very different depending on country&apos;s languages. There are a lot of variation on the organisation of the key but no so much on their shape.&lt;/p&gt;
&lt;p&gt;Modern computer follow one of three physical layouts, ISO, ANSI and JIS, At least something simple!&lt;/p&gt;
&lt;p&gt;ISO layout has a split left shift key and the big enter. ANSI has the small &apos;return&apos; key and a long key above. And JIS has a smaller space bar, some additional keys around it, the big &apos;return&apos; and a smaller right shift.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Most people are able to switch from one layout to another (as long as the alpha key are the same), the biggest issue being the size of the return key for the ANSI layout.&lt;/p&gt;
&lt;h3&gt;What about keyboard sizes?&lt;/h3&gt;
&lt;p&gt;As you see, there are many variations of the keyboard you know and love. But there is another layer to this, keyboard sizes.&lt;/p&gt;
&lt;p&gt;I&apos;m sure you all know and use several keyboard sizes every day without realizing it!&lt;/p&gt;
&lt;p&gt;First there is the 100%, the full size keyboard which is composed of all the letters, the modifiers, the numeric pad and the function row. This is the biggest keyboard you can find in shops.&lt;/p&gt;
&lt;p&gt;I feel like full size keyboard had their time and people start to use smaller keyboard thanks to our smartphones that are composed of a 40%! The smartphone keyboard is probably the smallest used by many, yet it&apos;s still completely possible to write texts.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This is thanks to layers that we all use every day. We can long press a key to access accent, or change layer with keys around the space bar. This is designed to circumvent the limitations of small keyboards.&lt;/p&gt;
&lt;p&gt;Using a smaller keyboard on smartphones made people realized that having a full size keyboard is not required. People can ditch the num pad to get an 80% or a tenkeyless (TKL). Removing the function row results in a 65% and removing the arrow keys a 60%.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Of course there are smaller keyboards such as 40%, only composed of the alpha keys and the modifiers, but they are less common.&lt;/p&gt;
&lt;h2&gt;What makes the US keyboard good&lt;/h2&gt;
&lt;p&gt;First, I don&apos;t want to say that the US keyboard is superior. This highly depends on the work you do, the language of your computer, and your personal preference.&lt;/p&gt;
&lt;p&gt;However, I can argue that developers can highly benefit from using the standard QWERTY ANSI keyboard. This will not only make you more efficient, but will also make your life easier.&lt;/p&gt;
&lt;p&gt;It&apos;s likely that the person that built the software you&apos;re using are either using the QWERTY layout or have a large chunk of their customer base using it. There is special care for this layout and other comes as a second thought.&lt;/p&gt;
&lt;p&gt;Not convinced? Here are four reasons I think that the keyboard is better.&lt;/p&gt;
&lt;h3&gt;Keys easily accessible&lt;/h3&gt;
&lt;p&gt;Let&apos;s start with the most obvious reason and the one that will make you hate your hold keyboard. Accessing keys used in programming is one (or two max) key press away.&lt;/p&gt;
&lt;p&gt;Opening a square bracket ([]) is only one key press. For comparison, doing it on a French AZERTY keyboard requires pressing right alt and 5. The key is not marked, making it hard to find your mistake if you&apos;re sleepy. Worse, the closing bracket key is not next to the opening one, it&apos;s 6 key further down the keyboard!&lt;/p&gt;
&lt;p&gt;Doing a curly bracket on QWERTY is shift and [] key. Simple and marked on the keyboard. Doing so on a Swiss keyboard is done with right alt and 8, again the key is unmarked.&lt;/p&gt;
&lt;p&gt;I remember making mistakes and having to do some gymnastic with my fingers when I was using the Swiss layout. This is no longer the case, and I can confidently say that the QWERTY layout makes coding easier.&lt;/p&gt;
&lt;h3&gt;All shortcuts working out of the box&lt;/h3&gt;
&lt;p&gt;I cannot count the number of keyboard shortcuts that weren&apos;t supported when I used my Swiss layout. For example, it was not possible to comment a line of code or a block of code in VS Code, since the software didn&apos;t recognize it.&lt;/p&gt;
&lt;p&gt;Building a software is hard, but building an IDE or text editor must be a pain. Supporting a broad range of keyboard layout and adapt the shortcuts for each layout is a near impossible task. This is why some shortcuts simply don&apos;t work on some software, with luck you can bind the shortcut to something else, but if this is not the case you&apos;re screwed.&lt;/p&gt;
&lt;p&gt;All that is without considering the time you&apos;ll lose configuring the software and the pain it is to use someone else computer. Spending time configuring keyboard shortcuts is not something I want to spend time one.&lt;/p&gt;
&lt;p&gt;Switching to the QWERTY layout solved all my issue, sure I had to learn a few new shortcuts, but everything worked out of the box and I know more shortcuts than before.&lt;/p&gt;
&lt;h3&gt;Easier to find help or follow guides&lt;/h3&gt;
&lt;p&gt;As for shortcuts, there is a high level chance that the documentation of the software you&apos;re using isn&apos;t localized. There are exception with bigger software that have the people and money required to make sure that everyone in the world can follow their guide.&lt;/p&gt;
&lt;p&gt;Anyhow, chances are that you won&apos;t have documentation that follow your keyboard layout.&lt;/p&gt;
&lt;p&gt;Again, using the US QWERTY layout will greatly help. The documentation I had to follow all used the standard US keyboard layout. In the rare instances I had to follow one I was able to solve my issue without any issue.&lt;/p&gt;
&lt;p&gt;I admit that this is not something I do on a daily basis. However, when I have to follow a documentation that&apos;s because I&apos;m in a pickle and finding myself blocked because of my keyboard layout is frustrating.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;More choice&lt;/h3&gt;
&lt;p&gt;You might have already tell but I like keyboards. They are part of those object from our every day life that are under appreciated and deserve a bit more love.&lt;/p&gt;
&lt;p&gt;I like my MacBook keyboard but I also enjoy mechanical keyboards. They are a fantastic rabbit hole filled with people that will build their own mechanical keyboard and considering every aspect of it to make sure it&apos;s perfect (until they find something even more perfect).&lt;/p&gt;
&lt;p&gt;Quite often the mechanical keyboard community will perform group by. Manufacturer have tight schedule and a minimum order size. Keyboards enthusiasts are part of a niche but there are many creative people that will design a keyboard case or a keycap set. They will then share their design online and if enough people are interested (to meet manufacturer limits) will turn their designs into reality.&lt;/p&gt;
&lt;p&gt;This process is quite long but every manufacturer produces at full capacity all the time and the group buy must fit in one of the available slot. This is why it can take up to 2 or 3 years before seeing your set.&lt;/p&gt;
&lt;p&gt;In the mechanical keyboard community the most common layout is the ANSI, every group buy will offer ANSI options. The same cannot be said about the ISO or JIS layout. If enough people are interested they will offer an option but there are no guarantee.&lt;/p&gt;
&lt;p&gt;This is why, if you&apos;re interested in mechanical keyboard it makes sense to switch to this layout.&lt;/p&gt;
&lt;h2&gt;My personal experience&lt;/h2&gt;
&lt;p&gt;I live in Switzerland, we have a QWERTZ layout that is quite similar to what the US QWERTY layout is. However, we use a ISO physical layout instead of the ANSI.&lt;/p&gt;
&lt;p&gt;For a bit, I was convinced that the ISO layout was superior and that the big &apos;return&apos; key is a good thing.&lt;/p&gt;
&lt;p&gt;This all changed when I changed job. I joined Proton which is a tech company with employee across the world. To ease logistics, they gave me a US QWERTY keyboard. Without this job I would probably never have used a US keyboard.&lt;/p&gt;
&lt;h3&gt;How was the switch&lt;/h3&gt;
&lt;p&gt;At first, I was a bit surprised; I was expecting a Swiss keyboard. The office manager offered me a Swiss keyboard but I declined since I have heard good things about the US keyboard and decided to give it a try before giving up.&lt;/p&gt;
&lt;p&gt;Writing was quite easy, the alpha keys are very similar to the QWERTY layout. In about two day I was typing at my regular speed and only did some mistake while pressing the return key that was much smaller to the big one I was used to.&lt;/p&gt;
&lt;p&gt;Coding was also easier but I had more muscle memories with those keys. I did quite a few mistakes at first and was frustrated. I even thought that the unmarked keys of the Swiss keyboard were a better solution.&lt;/p&gt;
&lt;p&gt;With time I did less and less mistakes and I started to code even faster. All the key required to write code (at least in TypeScript / Javascript land) are very close and can be accessed with few modifiers.&lt;/p&gt;
&lt;p&gt;After about two weeks I ordered a ANSI PCB (the card where the switch go) for my mechanical keyboard since it was hard for me to switch and I realized that the ANSI layout is superior.&lt;/p&gt;
&lt;h3&gt;What is still hard&lt;/h3&gt;
&lt;p&gt;I work in an international company, meaning that we write most of our messages in english. However, I have quite a few coworkers that write to me in french.&lt;/p&gt;
&lt;p&gt;French is full of accent and the US QWERTY keyboard don&apos;t support them. At least there are no dedicated keys for them. This is not that big of deal since all accent are available with keyboard shortcuts making it easy to use them. It&apos;s also possible to hope that the OS will put the accent for you but this is not working perfectly in my experience.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://support.apple.com/guide/mac-help/enter-characters-with-accent-marks-on-mac-mh27474/mac?ref=flavienbonvin.com&quot;&gt;macOS documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://support.microsoft.com/en-us/topic/keyboard-shortcuts-for-international-characters-108fa0c1-fb8e-4aae-9db1-d60407d13c35?ref=flavienbonvin.com&quot;&gt;Windows documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Overall experience&lt;/h3&gt;
&lt;p&gt;I have to say that I was anticipating quite a painful switch but this was not the case at all. After a few days I was able to write at the same speed as before and after a couple of week I completely did the switch.&lt;/p&gt;
&lt;p&gt;I currently still have my personal computer with the Swiss ISO layout and it&apos;s quite painful to use for coding. If I go out to work on side project or thinker with a new tool I will take my work computer simply because it&apos;s way nicer to code with the ANSI layout.&lt;/p&gt;
&lt;p&gt;I&apos;d like to point out that the switch was easy for me thanks to the similarities between the Swiss and US keyboard. Most of the keys are at a similar place.&lt;/p&gt;
&lt;p&gt;The same cannot be said for my french coworkers used to the AZERTY layout. There are a lot of differences and most of my coworkers are using an external keyboards because it&apos;s too hard to change. On a side note, I find the French keyboard really bad and inefficient. I don&apos;t understand how they ended up with this layout. Maybe this could be traced back the the typewriter and the fact that they didn&apos;t want a layout similar to what the english had.&lt;/p&gt;
&lt;p&gt;Anyhow, the US QWERTY keyboard is really nice and you should give it a try.&lt;/p&gt;
&lt;h2&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;I hope that this article put some perspective on why the US ANSI keyboard is great. It&apos;s a real productivity enhancement besides the ease of use it offers over other layouts.&lt;/p&gt;
&lt;p&gt;Of course there might be some layout in the world that are close and offer the same benefits as what the US ANSI keyboard offer. If you&apos;re someone lucky enough to have this kind of layout you don&apos;t need this article to convince you I guess.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Know comes the question, how can I test this keyboard without having to change my laptop? I&apos;m glad you ask!&lt;/p&gt;
&lt;p&gt;Before diving in the unknown and making any significant change I would suggest two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you have a keyboard using the ANSI layout: you&apos;re pretty much good to go. Simply go in your keyboard settings and change the layout to the US one, on macOS it&apos;s called &quot;ABC&quot;&lt;/li&gt;
&lt;li&gt;If you have a ISO or JIS layout: don&apos;t change your laptop or buy an expensive mechanical keyboard. You can buy a cheap generic keyboard (such as the one Dell produce) and try the new layout this way. They are fairly cheap and will allow you to git the layout a spin. If you have a mechanical keyboard, it&apos;s possible that an ANSI version of the board exist (or you board already supports it). You can swap the board and test the ANSI layout this way.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Switching layout can be hard depending on where you&apos;re coming from. If you&apos;re french, for example, the transition will be painful but so was each republic yet you&apos;re at your fifth.&lt;/p&gt;
&lt;p&gt;You&apos;ll have to spend about one or two week to get use to the new layout. I would highly suggest you to use this website to help the transition: https://www.keybr.com/. The website focus on muscle memory to help you learn to touch type. It&apos;s hard but efficient, the more you use it the easier it gets!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Here we are, at the end of this 2000 words high quality piece. If you read all the article this is probably because you either really like keyboard or like my writing style (or both).&lt;/p&gt;
&lt;p&gt;Either way I&apos;m happy to see that you read my article and I can only encourage you to subscribe to my newsletter so you&apos;ll have access to all my latest article right from your inbox!&lt;/p&gt;
&lt;p&gt;No spam, no advertisement, just the article that you can read right from your inbox!&lt;/p&gt;
</content:encoded><author>Flavien Bonvin</author></item><item><title>How Obsidian Improved My Organization at Work and Home. First Month Review</title><link>https://flavien-bonvin.vercel.app/articles/how-obsidian-improved-my-organization-at-work-and-home-first-month-review/</link><guid isPermaLink="true">https://flavien-bonvin.vercel.app/articles/how-obsidian-improved-my-organization-at-work-and-home-first-month-review/</guid><description>Switching to Obsidian was motivated by Tana waitlist. Was it the right decision? My honest review after a few months using Obsidian</description><pubDate>Mon, 24 Apr 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In a previous article, I detailed the research process that lead me to choosing Obsidian as a new note-taking application.&lt;/p&gt;
&lt;p&gt;Having to wait an indefinite amount of time to get access to Tana was what made me consider other options. Side note, I still don&apos;t received my Tana invite.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;The problem I wanted to solve&lt;/h2&gt;
&lt;p&gt;The main things I was looking for was an overall improvement on my organisation for both my work and my personal life.&lt;/p&gt;
&lt;p&gt;At work, I have to switch between tasks quite frequently, and it was hard to remember in which state I left something or keep a track of things I have in progress.&lt;/p&gt;
&lt;p&gt;Besides that, I try to have a central place where I store my article ideas and my writing. This way there is no guess work and I know where I can write and where to write my ideas.&lt;/p&gt;
&lt;h3&gt;What changed after choosing Obsidian&lt;/h3&gt;
&lt;p&gt;In the past, I used a combination of Bear for note-taking and Things for to-do. I replaced Bear with Obsidian and made a better use of Things.&lt;/p&gt;
&lt;p&gt;I now use Things to keep a track of actionable things I have to do (as it&apos;s supposed to be used) and I keep Obsidian as a central place where I can come back to find information (as long as I wrote it down).&lt;/p&gt;
&lt;h2&gt;First few days&lt;/h2&gt;
&lt;p&gt;The first few days were a bit overwhelming. Obsidian is very powerful and don&apos;t provide much guidance when it comes to organisation. This is because there is no proper way to use Obsidian.&lt;/p&gt;
&lt;p&gt;I was confused by the mix of label and folders and wasn&apos;t sure what was the best way to organize my notes.&lt;/p&gt;
&lt;p&gt;Besides that, there was the plethora of plugins, both the core and community. Which one are required, how to configure them,...&lt;/p&gt;
&lt;p&gt;One video helped me to release a bit of pressure. I finally decided to use the tool instead of being in an active procrastination loop.&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=jwBZDQXopvc&lt;/p&gt;
&lt;h2&gt;Review after a few months&lt;/h2&gt;
&lt;p&gt;I&apos;ve now been using Obsidian for a few months, and I&apos;m much more relaxed than in the first few days. Since there is no right way to use Obsidian, there is also no wrong way to use it.&lt;/p&gt;
&lt;p&gt;Obsidian is a tool that feels a bit like Things (on steroids). You are left with a blank slate and the user has to own the tool and make it his / her own.&lt;/p&gt;
&lt;h3&gt;General organisation&lt;/h3&gt;
&lt;p&gt;I ended up using a mix of folders and tags. They don&apos;t fulfill the same goal in my workflow and work well in combination.&lt;/p&gt;
&lt;p&gt;Folders are great to create silos of information. I have a folder for my work, one for my blog and one for my personal stuff. Those three areas aren&apos;t overlapping, and it makes no sense for me to have everything in one folder.&lt;/p&gt;
&lt;p&gt;Labels are a really great to add metadata on notes. I have templates that help me create new notes, and they all have a place on the top for metadata.&lt;/p&gt;
&lt;p&gt;The metadata are used by the data view plugin to create table and sort rows.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The screenshot above shows how the template I use for work is displayed. I define the metadata with the Task:: notation.&lt;/p&gt;
&lt;p&gt;I could avoid using labels and only have metadata, but labels helps with consistency and I have suggestion when writing them, which is a time-saver.&lt;/p&gt;
&lt;h3&gt;Canvas for dashboard&lt;/h3&gt;
&lt;p&gt;At first, I had a hard time understanding what problem Canvas were solving. I wasn&apos;t sure why I why would I need an infinite whiteboard where I can have information of notes and color blocks.&lt;/p&gt;
&lt;p&gt;I then saw a screenshot of someone using Canvas as a dashboard, where a collection of note was used to track the progress of projects.&lt;/p&gt;
&lt;p&gt;Dashboard is where Canvas shine for me. I have a &lt;code&gt;canvas&lt;/code&gt; folder in my work folder where I keep having a collection of notes that are created only to be used in my dashboard.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The task I work on often follow the same flow. Todo -&amp;gt; in progress -&amp;gt; in QA -&amp;gt; done. This is the standard process unless the QA team finds an issue on my feature; if that&apos;s the case, the task goes back in &quot;in progress&quot;.&lt;/p&gt;
&lt;p&gt;I created one note per status, so I can easily see where I&apos;m at with my work. I can also easily find older tasks.&lt;/p&gt;
&lt;p&gt;Besides that, I&apos;m creating a basic wiki where I write down some process. This is useful for things that rarely happen or involve other people.&lt;/p&gt;
&lt;p&gt;I have all the wiki notes in a separate block to help me find them.&lt;/p&gt;
&lt;p&gt;Finally, I have a &quot;lost note&quot; note. This is a simple list of all the notes that have the &quot;Proton&quot; tag but aren&apos;t in the Proton folder. It&apos;s a simple note to help me to tide things up.&lt;/p&gt;
&lt;h3&gt;Published article table&lt;/h3&gt;
&lt;p&gt;I like to keep a track of the articles I published, their link and the date of publication. This helps me reference things and have a look back on the things I wrote.&lt;/p&gt;
&lt;p&gt;On top of that, I keep some stats about my blog, so I can see how things progress. It&apos;s basic stuff that I manually update from time to time.&lt;/p&gt;
&lt;p&gt;This way I know, for every year, how many articles I wrote, the numbers of page views and unique visitor or the people that registered to my newsletter.&lt;/p&gt;
&lt;p&gt;There is nothing fancy about this page, it&apos;s a table that I manually update. It has become a nice place for me to come back and appreciate the progression.&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h2&gt;What I like&lt;/h2&gt;
&lt;p&gt;There are a lot of things that I liked or saw an improvement by using Obsidian for a few months. Let me go through the improvements I noted and explain how Obsidian helped me.&lt;/p&gt;
&lt;h3&gt;Organization improvement&lt;/h3&gt;
&lt;p&gt;My initial goal was to improve organisation for both my work and my blog. After the initial setup, I can say that this was achieved. Having the option to create automatic tables is really important.&lt;/p&gt;
&lt;p&gt;The data view plugin plays a huge role in that. Using simple tags and metadata I can format, filter and display information coming from different folders and notes. It&apos;s something I missed in the past, and that really helped me reduce the things I had to keep in mind.&lt;/p&gt;
&lt;h3&gt;Increase motivation&lt;/h3&gt;
&lt;p&gt;I have been working a lot more for my blog this year. This is despite having to commute more to work and have more things happening in my personal life.&lt;/p&gt;
&lt;p&gt;Having a more pleasing writing experience that I can make look how I want (more on the themes later) was what motivated me to do more. Besides, backlinks helped me go from an idea, a bullet point in a list, to a note in one click is a tremendous time savior.&lt;/p&gt;
&lt;p&gt;Overall, Obsidian reduced the friction when it came to write, it&apos;s possible to directly start a note, move it in a folder, add metadata only with the keyboard. No excuse, I can simply create a note, write what I want and aggregate data.&lt;/p&gt;
&lt;h3&gt;Fine tune productivity system&lt;/h3&gt;
&lt;p&gt;My productivity system has nothing special by any means. I like to have a limited amount of tools that I know well (or well enough for my need). Switching to obsidian was basically replacing one tool (Bear) with another.&lt;/p&gt;
&lt;p&gt;However, the richness of the basic features and the plugin&apos;s ecosystem improved things in an unexpected way. I spend more time adding tasks to Things and write about my work.&lt;/p&gt;
&lt;p&gt;Switching to Obsidian created momentum where I spend more time writing things done and organizing different aspects of my life.&lt;/p&gt;
&lt;h3&gt;Usability and performances&lt;/h3&gt;
&lt;p&gt;Last but not least, the performances of Obsidian are best in class. I have a rather small vault, so it&apos;s to be expected, but everybody seems to agree that the application remain snappy regardless of the amount of loaded data.&lt;/p&gt;
&lt;p&gt;The performances combined with the powerful command palette (with the nice addition of the slash command) makes the whole experience enjoyable.&lt;/p&gt;
&lt;h2&gt;What I don&apos;t like so much&lt;/h2&gt;
&lt;p&gt;There are however things that I had issue with when first starting my journey. There were more road bumps than stops, it was mostly adaptation I had to do.&lt;/p&gt;
&lt;h3&gt;Onboarding is rough&lt;/h3&gt;
&lt;p&gt;First, the first start of Obsidian is a bit rough. I understand that guiding people would be a hard endeavor since there is no good way to use Obsidian.&lt;/p&gt;
&lt;p&gt;Some might like tags, other folders, some wants to use the Zettelkasten methods and others don&apos;t bother at all with ant note-taking method (that&apos;s my case)&lt;/p&gt;
&lt;p&gt;The fact that there is no right way to use software does not mean that there is no wrong way to use it. I&apos;m sure that developers or the community could come up with ideas on how not to use Obsidian. This collection of tips could be compiled into a not that is present in every new vault.&lt;/p&gt;
&lt;p&gt;Besides, having (as it&apos;s the case in many competitors) a template note that explains how things work on Obsidian would be great. A basic note that explains how to format text, how (and why) to make backlinks, ... I think that people with no prior knowledge of note-taking application could be confused without a bit of help.&lt;/p&gt;
&lt;h3&gt;Value of the sync&lt;/h3&gt;
&lt;p&gt;Having my note available on my phone is important for me. I want to be able to quickly reference something or add something to a note.&lt;/p&gt;
&lt;p&gt;This is why I took a subscription to the Sync. However, upon the purchase, I was a bit disappointed with the state of the application.&lt;/p&gt;
&lt;p&gt;Don&apos;t get me wrong, the application is excellent and support most (if not all) the features of the desktop application.&lt;/p&gt;
&lt;p&gt;However, I don&apos;t feel the same desire to write on the mobile application. The navigation and the general layout feels a bit clunky. It feels a bit like a website optimized for desktop with poor responsiveness support. It works, but it feels like a second though and like the team and to resolve to hacky methods to make it work on smartphones.&lt;/p&gt;
&lt;p&gt;The current state of the mobile application disappointed me a bit. I wasn&apos;t able to see how things are looking with a vault on my phone, and only discovered how it was looking once I bought the sync (which is pretty steep).&lt;/p&gt;
&lt;p&gt;It&apos;s not a dealbreaker by any mean, but I feel like, although the feature parity, the mobile application deserves a bit more love to make it more usable on smartphones.&lt;/p&gt;
&lt;h2&gt;What I struggle with&lt;/h2&gt;
&lt;p&gt;Before presenting my plugin and theme, I want to go over a couple of struggles I&apos;m facing. They are not directly related to Obsidian but have been brought to light while I was switching to it.&lt;/p&gt;
&lt;p&gt;First, finding the right system and the right balance is not an easy task. Initially, I wanted to create a system of tags that was too complex and that required too much work to maintain. This meant that each new note required some work to set up. On top of that, changing the system was hard and tedious.&lt;/p&gt;
&lt;p&gt;Something like Notion could be more adapted for this kind of uses cases. However, I&apos;d rather use a software that force me to simplify my system than one that embrace complexity to the point of allowing for too much complexity.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Having a system in place is only the beginning of the work. You then need to use it, it would be a shame to spend a few hours thinking about your system and not using it in the end.&lt;/p&gt;
&lt;p&gt;This is also something I had (and still have) a problem with, having the consistency of writing things down and keeping them updated.&lt;/p&gt;
&lt;p&gt;I had consecutive days where I didn&apos;t open Obsidian. This wasn&apos;t a catastrophe, but it meant had a few notes that weren&apos;t up-to-date and some information that were in my head instead of my vault.&lt;/p&gt;
&lt;p&gt;This was fixed in a few minutes, but it was a reminder on how consistency, although being the key to improvement, is a struggle and easier said than done.&lt;/p&gt;
&lt;h2&gt;Theme, font and plugins&lt;/h2&gt;
&lt;p&gt;As said before, I try to have a limited amount of plugins. I think that less is better, and this is something that I try to apply to many aspects in life.&lt;/p&gt;
&lt;p&gt;Here is the list of the plugins that I have installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tgrosinger/advanced-tables-obsidian&quot;&gt;Advanced Tables&lt;/a&gt;: makes the process of table creation and management way easier. The plugin automatically format the table to the size of the content, adds and remove rows or column in a click, ... It makes working with tables a pleasure.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/blacksmithgu/obsidian-dataview&quot;&gt;Dataview&lt;/a&gt;: allow the creation of complex tables and lists. The plugins use file location, file name, tags, metadata, ... to create tables or list of notes that matches the query. It&apos;s what I use for my dashboard. The possibilities are endless, and &lt;a href=&quot;https://blacksmithgu.github.io/obsidian-dataview/&quot;&gt;the documentation&lt;/a&gt; is well-made&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ryanpcmcquen/obsidian-focus-mode&quot;&gt;Focus Mode&lt;/a&gt;: remove side panels to reduce the noise. I use the focus mode when I&apos;m writing blog posts. Removing the UI helps me focus on the text. I can find the Obsidian UI a bit in the way when I want to focus, and being able to remove it when I want is great.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Clemens-E/obsidian-languagetool-plugin?ref=languagetool.org&quot;&gt;LanguageTool Integration&lt;/a&gt;: English is not my first language, this is why I need a corrector. Besides that, I often miss coma or have two spaces instead of one. I&apos;ve been using LanguageTool and &lt;a href=&quot;https://www.antidote.info/en/&quot;&gt;Antidote&lt;/a&gt; to help me fix some of the error I leave. It has been several years, and I&apos;m very pleased with both softwares that don&apos;t feel like a spyware, unlike Grammarly. The corrector is un-sync with the text from time to time, but a bit of patience is all it takes to fix the issue.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mgmeyers/obsidian-style-settings&quot;&gt;Style Settings&lt;/a&gt;: allow for theme customization. I used this plugin only once, after installing my theme. It helps theme expose some settings such as highlight color or variables.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pjeby/tag-wrangler&quot;&gt;Tag Wrangler&lt;/a&gt;: I use a fair amount of tags and there are times when I want to change one of them. This is when Tag Wrangler is handy, the plugin helps rename and search tags. It&apos;s a very small plugin that I rarely use but never disappoint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&apos;s all for the plugins, the list is pretty small, and I&apos;m quite happy with my current setup.&lt;/p&gt;
&lt;p&gt;I went through the list of the most popular plugins and I don&apos;t think I&apos;m missing anything. I might use &lt;a href=&quot;https://github.com/denolehov/obsidian-git&quot;&gt;Obsidian Git&lt;/a&gt;, but I&apos;m paying for the sync, and I&apos;m using iCloud to save my vault.&lt;/p&gt;
&lt;p&gt;Last but not least, I&apos;m using the &lt;a href=&quot;https://connary.com/cartograph.html&quot;&gt;Cartograph&lt;/a&gt; font everywhere. It&apos;s a monospaced font I bought at the beginning of the year that I absolutely love. It must be one of the impulse buy I don&apos;t have any regret to have done!&lt;/p&gt;
&lt;p&gt;When it comes to the theme, I use &lt;a href=&quot;https://github.com/catppuccin/obsidian&quot;&gt;Catppuccino&lt;/a&gt; in its Mocha variant. I&apos;m a huge fan of the &lt;a href=&quot;https://rosepinetheme.com/&quot;&gt;Rosé Pine&lt;/a&gt; theme (this is how I discovered the Cartograph font) but the one available on the store is not as minimalistic and clean as I would have loved.&lt;/p&gt;
&lt;h2&gt;Final words&lt;/h2&gt;
&lt;p&gt;As you might have guessed, I&apos;m very happy of Obsidian. The application suits my need and I motivate me to write and organize stuff in my life.&lt;/p&gt;
&lt;p&gt;I&apos;ve seen a positive impact in both my job; where I&apos;m more organized, and I have a place I can come back to when I need an information and for my blog where I&apos;m more motivated to write articles.&lt;/p&gt;
&lt;p&gt;My personal life is an area where Obsidian didn&apos;t have much impact (yet?). This is likely due to the fact that I didn&apos;t write much in the past, and nothing has changed in that regard.&lt;/p&gt;
&lt;h3&gt;My biggest complaint&lt;/h3&gt;
&lt;p&gt;The biggest downside or disappointment comes from the mobile application. I get that supporting all the features of the desktop app and the plugins must be a huge task.&lt;/p&gt;
&lt;p&gt;However, I feel like the mobile application is too much like the desktop app in a smaller form factor.&lt;/p&gt;
&lt;p&gt;In my opinion, there are rooms for improvement to make the mobile experience as pleasing as the desktop experience.&lt;/p&gt;
&lt;h3&gt;A very positive experiment&lt;/h3&gt;
&lt;p&gt;Overall, I highly recommend anyone to test Obsidian. The application is excellent, performances are excellent, plugins supports helps fill some gaps.&lt;/p&gt;
&lt;p&gt;Don&apos;t stress too much when it comes to testing the application. There is no right way to use Obsidian. We&apos;re all different and your setup will be as unique as you are, so don&apos;t spend too much time looking at other people setups.&lt;/p&gt;
&lt;p&gt;Make your one setup, make mistake, fix them and thinker until you find the one that suits you.&lt;/p&gt;
</content:encoded><author>Flavien Bonvin</author></item><item><title>How Tana Made Me Choose Obsidian as My Note-Taking App and It’s Amazing</title><link>https://flavien-bonvin.vercel.app/articles/how-tana-made-me-choose-obsidian-as-my-note-taking-app-and-its-amazing/</link><guid isPermaLink="true">https://flavien-bonvin.vercel.app/articles/how-tana-made-me-choose-obsidian-as-my-note-taking-app-and-its-amazing/</guid><description>Choosing the right note-taking application can be overwhelming. I didn&apos;t fail to fall into this trap. Quick look on my decision process before choosing Obsidian</description><pubDate>Mon, 13 Feb 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;import { YouTube } from &quot;astro-embed&quot;;&lt;/p&gt;
&lt;p&gt;I recently spent a lot of time thinking about using &lt;a href=&quot;https://obsidian.md/&quot;&gt;Obsidian&lt;/a&gt; over &lt;a href=&quot;https://logseq.com/&quot;&gt;Logseq&lt;/a&gt;. This even made me think that I should stop using my current note-taking and to-do application.&lt;/p&gt;
&lt;p&gt;I feel like I have to do some changes in my system to have a better management of my knowledge and make me a more organised person.&lt;/p&gt;
&lt;p&gt;Let&apos;s go through my thought process and how I ended up switching my note-taking application.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;What is the current problem?&lt;/h2&gt;
&lt;p&gt;It&apos;s hard for me to really know what the problem is, since it&apos;s the first time I ask this question. Here are the pain point I&apos;m experiencing on a daily basis.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Keeping a track on what&apos;s happening at work&lt;/strong&gt;. I often work on multiple things in parallel. This is due to the fact that I have several things I have to work on and that I have to wait on other people.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keeping track of the blog ideas I have&lt;/strong&gt;. Currently, I have those ideas on &lt;a href=&quot;https://culturedcode.com/things/&quot;&gt;Things&lt;/a&gt; and on &lt;a href=&quot;https://bear.app/&quot;&gt;Bear&lt;/a&gt;. This isn&apos;t working since I don&apos;t go to either of those when I want to write, and I instead write the new article.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remembering when and what happened&lt;/strong&gt;. This often occurs at work. Something was changed, or a decision was taken, but I cannot remember when it was, why we took this decision. There are times when I cannot remember the decision all together.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lack of organisation in my notes&lt;/strong&gt;. My current note-taking application don&apos;t allow me to have templates or lack some of the more advanced features I think I need.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keeping a list of things to do on a daily basis and report things that weren&apos;t done&lt;/strong&gt;. This isn&apos;t as big of an issue as the other points, since I&apos;m using Things to manage my tasks. However, I&apos;m not the best at being consistent with that.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What is my current system&lt;/h2&gt;
&lt;p&gt;I currently use a combination of application. Which is not something I plan to stop, but I want to keep the number of tools to a minimum.&lt;/p&gt;
&lt;p&gt;Having multiple specialised application is not a problem as long as they don&apos;t create too much friction.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bear&lt;/strong&gt; as a writing application. That&apos;s where I write all of my blog posts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Things&lt;/strong&gt; as a to-do application. Most of my tasks are managed on Things and are where I plan my projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown files in VS Code&lt;/strong&gt; as a programming-related to-do. I keep a list of things to do on a feature or on a project in a pinned markdown file that is simply saved on iCloud.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There isn&apos;t any other application I use. I created a simple system since I didn&apos;t felt the need to have something else. However, now things changes and I want to make things better for me.&lt;/p&gt;
&lt;p&gt;The main issue I have currently is that Bear and Things aren&apos;t working great together or lack some features.&lt;/p&gt;
&lt;h3&gt;What triggered my desire to change&lt;/h3&gt;
&lt;p&gt;I discovered &lt;a href=&quot;https://tana.inc/&quot;&gt;Tana&lt;/a&gt; and this made me fall into the rabbit hole that are note-taking applications. At first, I just wanted to wait for the invite, but I looked at suggestion that were similar, and I discovered Logseq.&lt;/p&gt;
&lt;p&gt;Logseq seems interesting, but I&apos;m not sure that an outliner is what I need. An outliner is an application where everything is in a bullet list. I want to have the liberty to write large amount of texts (as I&apos;m doing right now) without having to find workaround. So outliner might not be the appropriate solution.&lt;/p&gt;
&lt;p&gt;I spend quite sometimes looking at videos about Logseq (I should have looked at &lt;a href=&quot;https://roamresearch.com/&quot;&gt;Roam Research&lt;/a&gt; instead since the two software are very similar) and I was a bit overwhelm by everything.&lt;/p&gt;
&lt;h3&gt;What makes the change hard&lt;/h3&gt;
&lt;p&gt;I never took any meaningful notes in my life (like never). Whether it was during my studies or in my personal life. For most part of my life, I went with the flow and life was kind to me.&lt;/p&gt;
&lt;p&gt;I faced some failures in my life, but I never thought too much about them. It happened and I went ahead with my life. That&apos;s only recently that I came to the realisation that living life in autopilot isn&apos;t sufficient and will create issues in the future.&lt;/p&gt;
&lt;p&gt;It&apos;s fun how thinking about changing a note-taking application turned into a therapy session.&lt;/p&gt;
&lt;p&gt;Back to the note, trying to solve a problem I never really faced is quite hard.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Should I use an outliner application such as Logseq, Roam or Workflowy? Should I go for an app that can be customised? Is Notion still a good option and is it good for me? What is good for me? What the hell is a graph, and how can this make my life easier?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As you can see, a lot of question to whose I have no answer.&lt;/p&gt;
&lt;h2&gt;What I am looking for?&lt;/h2&gt;
&lt;p&gt;It&apos;s funny, I asked this question to myself only when I realised that I could make an article out of my thought rambling.&lt;/p&gt;
&lt;p&gt;Here is a short list of what I am looking for.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nice writing experience&lt;/strong&gt;. That&apos;s something important. I&apos;m used to Bear, and I like its minimal approach to markdown and writing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Format liberty&lt;/strong&gt;. Another important point, I want to be able to have checklists, long texts, bullet lists, table, .... I don&apos;t want to be blocked in one style of input.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simple file formatting or export options&lt;/strong&gt;. Using a plain text file is great since it&apos;s future-proof If the application dies, there will be another one that supports the format and will need minimal change. Bear uses Markdown and I wanted to have something similar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Central place for everything&lt;/strong&gt;. Ideally, I would like to have all my notes in a central place and avoid splitting them in several tools / application. Putting everything in one basket is bad when it comes to investment, but I feel like it&apos;s required for my notes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Synchronisation across devices&lt;/strong&gt;. I have a private and a work computer and a phone. Naturally, I want to be able to add, edit and delete notes from all of those devices.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reasonable subscription price&lt;/strong&gt;. Being a developer, I know how critical recurring subscription (I guess this is a secret to nobody) are. I want to support the creators of the application first to ensure a future for the application and second to support them for their work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Support for correctors&lt;/strong&gt;. Since I write online, I want to make sure that I leave as little errors as possible. I use two apps for that, the free version of language tools and Antidote. I want to be able to use at least one of them in the application to make a first sanity check.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not Notion&lt;/strong&gt;. I don&apos;t like Notion, it&apos;s clunky and tries to do everything. I feel like some people are getting a bit tired of it and the app is not as hyped as it used to be. Regardless of the hype, I don&apos;t like Notion and this was a no-go for me.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, I have quite a lot of requirements and I know that finding the application that will perfectly suit me won&apos;t be possible. More on that later.&lt;/p&gt;
&lt;p&gt;Since I&apos;m quite new with note-taking, I&apos;m not looking at crazy graph views, plugins, and note-taking methods. This is something I&apos;ll have time to discover as I use the application, but is a bit out of scope right now.&lt;/p&gt;
&lt;h3&gt;The problem with checklist&lt;/h3&gt;
&lt;p&gt;Before diving into the solution, I want to share a secret with you. Checklist are great when used correctly. It&apos;s possible that they have a negative impact on your life if poorly used.&lt;/p&gt;
&lt;p&gt;I like to spend time finding the right product for my needs. For that, I often do research and learn a lot about the subject. I like hunting products or stuff.&lt;/p&gt;
&lt;p&gt;This works well when it comes to buying a stew pot, a coffee machine or a computer monitor. It&apos;s a way to be intentional in our purchases.&lt;/p&gt;
&lt;p&gt;However, this approach has its limits. It is possible that the established checklist is influenced by irrational or emotional factors.&lt;/p&gt;
&lt;p&gt;These factors are often created by companies wanting to sell their product. Whether it is marketing terms or performance charts, companies know very well what they are doing and play with our emotions.&lt;/p&gt;
&lt;p&gt;This also applies to relationships. This time, irrational or emotional factors are influenced by society, our education or our situation. Ali Abdaal talks about this in a video about relationships and how not to end up alone in your life.&lt;/p&gt;
&lt;p&gt;https://www.youtube.com/watch?v=h-mxesCotgs&lt;/p&gt;
&lt;p&gt;To boil it down to it&apos;s core, people approach relationships with expectations of how the person presents themselves to the world, when it&apos;s more interesting to focus on how the person actually is.&lt;/p&gt;
&lt;p&gt;This means that you might exclude someone based on criteria that aren&apos;t yours or are futile. It&apos;s only too late that you find out that despite a small thing you were hyper-focused on, the person was the right one for you. Even worse, you might not see how perfect someone is for you since you&apos;re not even looking at him/her.&lt;/p&gt;
&lt;p&gt;I&apos;ve been a victim of this myself, and it has impacted relationships in the past. Not fun, won&apos;t recommend.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;What are the solutions offered to me&lt;/h2&gt;
&lt;p&gt;As I see things, there are 3 solutions right now:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Don&apos;t change ant tool&lt;/strong&gt; and keep using the system as-is but with some improvements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use Obsidian&lt;/strong&gt; as a replacement for some of the Things and some of the Bear usage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use Logseq&lt;/strong&gt; and add it to my current set of tools to use it as a way to manage both my tasks and daily notes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keep searching&lt;/strong&gt; and try to find if there is a niche note-taking application that I&apos;m not aware of.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;What did I decide to go for&lt;/h3&gt;
&lt;p&gt;After some videos and some search on &lt;a href=&quot;https://toolfinder.xyz/&quot;&gt;tool finder&lt;/a&gt;, I decided to go for Obsidian.&lt;/p&gt;
&lt;p&gt;Side note, tool-finder is a really great website to have a quick overview of most of the productivity tools existing on the market. Highly recommend you give the website a look. You can also check &lt;a href=&quot;https://www.youtube.com/@keepproductive&quot;&gt;Keep Productive&lt;/a&gt; videos on YouTube.&lt;/p&gt;
&lt;p&gt;I&apos;ve known Obsidian for several years now, and I think it&apos;s finally time for me to test it.&lt;/p&gt;
&lt;p&gt;To be fair, I&apos;m not sure about the graph view or the best way to manage how I enter information in the application. One thing is sure, my current system doesn&apos;t suit me and I have to change some aspects of it.&lt;/p&gt;
&lt;p&gt;I&apos;ll have time in the future to make it work properly. I&apos;m sure I&apos;m going to make mistakes, but this is a learning experience and a mine of content for my blog.&lt;/p&gt;
&lt;p&gt;One video helped me a lot. It&apos;s basically someone that address active procrastination - the act of looking at guides and video of a subject without actually using or practicing - and gives some advices for beginners.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Active procrastination is a deliberate delay of tasks in order to prioritise more important or beneficial activities. Although this approach may seem productive, it can be problematic if not managed properly, as it can lead to excessive procrastination and decreased overall productivity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&apos;s the bare minimum, and it encourages anyone to test, fail and adapt instead of trying to do everything perfect the first time.&lt;/p&gt;
&lt;p&gt;&amp;lt;YouTube id=&quot;https://youtu.be/jwBZDQXopvc&quot; /&amp;gt;&lt;/p&gt;
&lt;h2&gt;First thoughts on Obsidian&lt;/h2&gt;
&lt;p&gt;It&apos;s quite a new experience for me. I did some basic customisation - a theme and change the font for the one I use in VS Code called &lt;a href=&quot;https://connary.com/cartograph.html&quot;&gt;Cartograph&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My initial impressions are great. I enjoy using it and I write more notes than before. I still have quite a few blind spots, but I&apos;ll eventually sort them out.&lt;/p&gt;
&lt;p&gt;I&apos;m still not sure about the graph view. It feels like for most people it&apos;s a sort of flex to show how many notes they have and how complex and connected they are. I don&apos;t see them using the graph to find a note (which I guess the graph is not meant for).&lt;/p&gt;
&lt;p&gt;The backlinks are on the other hand quite useful. I can have a &quot;Home&quot; note for my work where I link all my current work, or an &quot;Article ideas&quot; note for my blog.&lt;/p&gt;
&lt;p&gt;I&apos;m not sure what&apos;s best between links and tag, and it seems like there is a debate around it. I feel like they can be used in combination. Links help linking (hence the name) ideas, where tags help group them. I&apos;ll see how it goes.&lt;/p&gt;
&lt;p&gt;Anyhow, the experience is quite great and I like how it goes for now. I&apos;m sure I&apos;ll find better uses in the future! Unless a new cool kid is released, and I feel the urge to switch to it.&lt;/p&gt;
</content:encoded><author>Flavien Bonvin</author></item><item><title>Quit Spotlight and Alfred, 10+ Best Raycast Extensions for Web Developers</title><link>https://flavien-bonvin.vercel.app/articles/quit-spotlight-and-alfred-10-best-raycast-extensions-for-web-developers/</link><guid isPermaLink="true">https://flavien-bonvin.vercel.app/articles/quit-spotlight-and-alfred-10-best-raycast-extensions-for-web-developers/</guid><description>Raycast extensions are a great way to improve productivity. Here is a list of 10+ extensions carefully curated for web developers</description><pubDate>Mon, 28 Nov 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The default macOS Spotlight feature get enhanced each year. Recently, it can give better web result and files can be previewed with the quick.&lt;/p&gt;
&lt;p&gt;These additions are fine, but competitors offer far more than the search and some quick actions. For quite a long time, the default recommendation was Alfred, but I want to argue that a new challenger has entered the room.&lt;/p&gt;
&lt;h2&gt;What Is Raycast&lt;/h2&gt;
&lt;p&gt;In short, Raycast can replace Spotlight. It can do search on the web, find files and open software. You press the CMD+Space key of your keyboard, and it opens. By default, Raycast also offers things that nor Spotlight or Alfred offers. For example, you can manage window position, create snippets, eject disks, change volume, search emojis…&lt;/p&gt;
&lt;p&gt;Out of the box, Raycast is already more powerful than both Spotlight and Alfred. This fact alone should be sufficient to make you consider it, but there is more!&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Extensions Store&lt;/h3&gt;
&lt;p&gt;Alfred has been the reference for quite some time now. What made Alfred great was the workflows. Those workflows can extend what Alfred does. One can control Spotify or send a Slack message right from Alfred.&lt;/p&gt;
&lt;p&gt;Users are able to share and download workflows. Allowing anyone to extend what Alfred can do. This is all nice until users want to find workflows or update them.&lt;/p&gt;
&lt;p&gt;Alfred’s developers never developed a centralized store where anyone can find other workflows. This led to the creation of a third-party website and an overall poor experience for everyone.&lt;/p&gt;
&lt;p&gt;That’s where Raycast excel. They have a store that contains all the extensions developed by people. You can search, install and update the extensions right from Raycast. Gone are the days when you have to download a workflow file from an unknown GitHub.&lt;/p&gt;
&lt;p&gt;Currently, the store counts more than 700 workflows. All those workflows are available from the search. Each extension can be customized or given a unique keyboard shortcut for easy access. The offering range from controlling Spotify to killing processes or generating a UUID.&lt;/p&gt;
&lt;h3&gt;Some Tips for New Users&lt;/h3&gt;
&lt;p&gt;There are three things that I want to share to new users of Raycast. Those tips are a great way to better use the software.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Do the tutorial&lt;/strong&gt;. Raycast offers a great tutorial, you learn all the keyboard shortcuts that makes you work a lot faster. Raycast ambition is to be used only by keyboard, there is no faster way to interact with a computer, and they created an excellent tutorial for that.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use CMD+K instead of your mouse&lt;/strong&gt;. With time, it’s possible that you forget keyboard shortcuts or that a new extension has some hidden feature you might want to use. Instead of using your mouse, uses the CMD+K command. This will open the “Action Palette” where you’ll see everything the extension or Raycast has to offer. You can see the attached keyboard shortcut and refresh your memory this way.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create alias and quick links&lt;/strong&gt;. Every extension or command can have its own alias or keyboard shortcut. Take the time to create an alias or a keyboard shortcut to things that you use the most. This way, you can quickly access to what you use the most. For example, I have CTL+CMD+E to open the emoji selector or CTL+CMD+C for the clipboard history. Sending emoji and finding things from the clipboard story are at my fingertip.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why Use Raycast&lt;/h2&gt;
&lt;p&gt;reasons why I would recommend anyone to give Raycast a try. Here are some other reasons why you might want to give it a try.&lt;/p&gt;
&lt;p&gt;Generally, I find the UI and UX better on Raycast than on Spotlight. There is absolutely no competition against Alfred, which looks outdated and doesn’t seem to have evolved in the last 5 years.&lt;/p&gt;
&lt;p&gt;Looks aside, performances are top-notch with Raycast. I find that it finds files faster than the competition and that results are generally better. Besides that, Raycast shows software and commands suggestions depending on your usage. This can be handy when you often have the same software open.&lt;/p&gt;
&lt;p&gt;I said it before, but being able to use Raycast only with the keyboard is excellent. The shortcuts are well-defined, don’t clash with existing software (I didn’t have an issue). Besides that, the UI makes sure to show the shortcuts, so it’s easy to learn them.&lt;/p&gt;
&lt;p&gt;Last point, Raycast is accessible without an account. You can download Raycast using brew (here: &lt;a href=&quot;https://formulae.brew.sh/cask/raycast&quot;&gt;raycast—Homebrew Formulae&lt;/a&gt;) and you’re all set. You only need to create an account if you want to publish an extension, which seems fair. Raycast intent to make money with the team plan where a team can share private extensions and secrets. Let’s hope they find the success they deserve.&lt;/p&gt;
&lt;p&gt;Those are the main reasons why I would recommend that you try Raycast. I was skeptical at first since the offering looked a bit too good, but I switched to it right after my first testing.&lt;/p&gt;
&lt;h2&gt;Extensions for Developers&lt;/h2&gt;
&lt;p&gt;Raycast initial offering was to target software developers, it makes sense that the overwhelming majority of extensions are targeted at developers. Besides, they are the one that can build extensions, so…&lt;/p&gt;
&lt;p&gt;Here are the extensions I frequently use as a front end engineer and the one I would recommend that you try.&lt;/p&gt;
&lt;h3&gt;Development extensions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Random data generator&lt;/strong&gt;
It’s quite frequent for a developer to use fake data. Faker-js is a library that can help with that, but how to get fake data when you’re filling a form or outside a programming project?&lt;/p&gt;
&lt;p&gt;Here come Random data generator that can generate anything for you. It can generate UUID and password, which is the data I generate the most with the extension.&lt;/p&gt;
&lt;p&gt;You can find the extension at this link: &lt;a href=&quot;https://www.raycast.com/loris/random&quot;&gt;Raycast Store: Random Data Generator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VS Code Project Manager&lt;/strong&gt;
I recently discovered the VS Code extensions “Project Manager” that helps to quickly switch between projects. You don’t have to browser your file system to find the project you want to open.&lt;/p&gt;
&lt;p&gt;I worked in an agency and I had to constantly switch projects. This extension would have helped me win so much time. Better late than never, I guess.&lt;/p&gt;
&lt;p&gt;The Raycast extension use the JSON config file generated by VS Code. You can quickly open the project you have configured. Quite a time saver and a nice way to quickly switch projects!&lt;/p&gt;
&lt;p&gt;You can find the extension at this link: &lt;a href=&quot;https://www.raycast.com/MarkusLanger/vscode-project-manager&quot;&gt;Raycast Store: Visual Studio Code - Project Manager&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vercel&lt;/strong&gt;
Vercel is quite an amazing hosting provider, I used it at my past job and all my personal projects are also hosted on their servers. This is why the Vercel extension is so useful for me.&lt;/p&gt;
&lt;p&gt;I often had to go to a specific deployment to see if everything was building correctly or to check the functions logs. The Vercel extensions redirect you directly where you want right from the Raycast. No need to open the website and navigate pages until you reach your destination.&lt;/p&gt;
&lt;p&gt;The extensions help you do anything you’ll have to manually do on the dashboard. You can visit the last working deployment, inspect the last deployment, or track your team deployment right from Raycast. For some strange reasons, you also have access to Vercel design systems.&lt;/p&gt;
&lt;p&gt;You can find the extension at this link: &lt;a href=&quot;https://www.raycast.com/MaxLeiter/vercast&quot;&gt;Raycast Store: Vercel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Search MDN&lt;/strong&gt;
It’s not rare that I have to check something in the MDN doc. The documentation is quite well indexed, and a Google search often results in the doc being the first result.&lt;/p&gt;
&lt;p&gt;But what’s the fun in that? Why should you have to leave your code editor to simply make sure of the syntax of a reduce? This extension allows you to search and read the document right from Raycast. It’s fast, and you can use your keyboard to do all the actions you want (space scrolls the doc down).&lt;/p&gt;
&lt;p&gt;You can find the extension at this link: &lt;a href=&quot;https://www.raycast.com/krzysztofzuraw/search-mdn&quot;&gt;Raycast Store: Search MDN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HeroIcons&lt;/strong&gt;
Most projects need icons, and I frequently choose HeroIcons as my default icons in my personal projects. The icons are really beautiful, and it’s quite easy to use it alongside Tailwind (since the icon pack is developed by the tailwind team).&lt;/p&gt;
&lt;p&gt;The extension allows you to search and copy JSX (or SVG) directly from Raycast, which is a huge time saver. Finding the appropriate icon is a breeze, and you can do all of that without leaving your editor.&lt;/p&gt;
&lt;p&gt;You can find the extension at this link: &lt;a href=&quot;https://www.raycast.com/haack/heroicons&quot;&gt;Raycast Store: Heroicons&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Work extensions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Jira&lt;/strong&gt;
Even if I didn’t have the chance to work with Jira in my career, I know that many developers do. On the other hand, I know that navigating from task to task in a project management software can be cumbersome and time-consuming.&lt;/p&gt;
&lt;p&gt;That’s why the Jira extension seems compelling. Finding, creating and tracking issues right from Raycast is quite amazing and can help many save a lot of time.&lt;/p&gt;
&lt;p&gt;You can find the extension at this link: &lt;a href=&quot;https://www.raycast.com/raycast/jira&quot;&gt;Raycast Store: Jira&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slack status&lt;/strong&gt;
When working remotely, it can be hard to put boundaries and make it clear that you’re focused on something. When working in an office, you can put your noise-canceling headphone that indicates that you don’t want to be disturbed.&lt;/p&gt;
&lt;p&gt;Using Slack messages can be a way to show to others what you’re doing or if you don’t want to be disturbed. The Slack Status extension helps you change the status right from Raycast, you can even create custom one that can be easily reused.&lt;/p&gt;
&lt;p&gt;To make the extension work, you’ll have to create a Slack application. This could be a no-go in some companies, making this extension useless. If you’re able to create an application, you’ll have the luxury to change your status right from Raycast.&lt;/p&gt;
&lt;p&gt;You can find the extension at this link: &lt;a href=&quot;https://www.raycast.com/petr/slack-status&quot;&gt;Raycast Store: Slack Status&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Things&lt;/strong&gt;
Where Jira is great for working with others, Things is an excellent application to organize your personal life. The application is one of the most recommended one and has been around for an eternity.&lt;/p&gt;
&lt;p&gt;The Things extensions can show your “today” tasks, the inbox or the incoming tasks. Besides that you can create new tasks with tags with a date, a project, tags. The only downside is that you need to have Things opened.&lt;/p&gt;
&lt;p&gt;You can find the extension at this link: &lt;a href=&quot;https://www.raycast.com/loris/things&quot;&gt;Raycast Store: Things&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pomodoro&lt;/strong&gt;
The Pomodoro technique is often cited as a great way to improve productivity. Working in 25-minute blocks with a 5-minute break and a longer break every 4 cycles would allow for better work and concentration.&lt;/p&gt;
&lt;p&gt;Using the Pomodoro technique is quite hard when doing development, I find it easier to focus for a longer period of time on a given feature rather than doing a break. However, developers also spend their time doing other things than development. That’s where the Pomodoro technique could prove itself useful.&lt;/p&gt;
&lt;p&gt;Sadly, there are no extensions that can handle all the Pomodoro features right from Raycast. The one I found on the store is controls for other applications. Session is a paid application (available in SetApp) and the other, Just Focus, is free and in beta.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can find the Session extension at this link: &lt;a href=&quot;https://www.raycast.com/jameslyons/session&quot;&gt;Raycast Store: Session - Pomodoro Focus Timer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You can find the Just Focus extension at this link: &lt;a href=&quot;https://www.raycast.com/koinzhang/just-focus&quot;&gt;Raycast Store: Just Focus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Computer control extensions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Spotify Player&lt;/strong&gt;
I have a hard time working without music, it helps me focus and, more importantly, indicate that I don’t want to be disturbed. My streaming service of choice has been Spotify since the day they were available in my country.&lt;/p&gt;
&lt;p&gt;Having control over the playing playlist, searching a track, liking and disliking a track, … most of the controls are available in the extensions. Except the controls themselves.&lt;/p&gt;
&lt;p&gt;For the controls, another extension is available. Simply called Spotify Controls allows you to play, pause, skip, shuffle play, … The two extensions are needed if you want full control over Spotify. I would suggest only using Spotify Controls if you only want basic controls.&lt;/p&gt;
&lt;p&gt;You can find the Spotify Player extension at this link: &lt;a href=&quot;https://www.raycast.com/mattisssa/spotify-player&quot;&gt;Raycast Store: Spotify Player&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can find the Spotify Controls extension at this link: &lt;a href=&quot;https://www.raycast.com/thomas/spotify-controls&quot;&gt;Raycast Store: Spotify Controls&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Coffee&lt;/strong&gt;
There are times when even computers need coffee. macOS offers the caffeinate command, which helps prevent the computer to go to sleep. The command is quite simple and could be used as is, but you need to open your terminal and run the command (or the alias).&lt;/p&gt;
&lt;p&gt;The Coffee extension does that for you within Raycast. This means that you don’t have to open a new software and quickly prevents your computer from going to sleep.&lt;/p&gt;
&lt;p&gt;You can find the extension at this link: &lt;a href=&quot;https://www.raycast.com/mooxl/coffee&quot;&gt;Raycast Store: Coffee&lt;/a&gt;&lt;/p&gt;
</content:encoded><author>Flavien Bonvin</author></item><item><title>What does CSR, SSR, SSG and ISR means and why should you care?</title><link>https://flavien-bonvin.vercel.app/articles/data-building-strategy-for-nextjs-app/</link><guid isPermaLink="true">https://flavien-bonvin.vercel.app/articles/data-building-strategy-for-nextjs-app/</guid><description>NextJS offers many ways to generate pages on the server to ensure fast page load. Let&apos;s see what CSR, SSR, SSG and IRS means!</description><pubDate>Mon, 07 Nov 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;One of the selling points of NextJS is the ability of rendering React pages on a server. This can ensure better performance and make the page SEO friendly meaning that search engine will index your pages.&lt;/p&gt;
&lt;p&gt;NextJS offers 3 methods to generate pages on a server, this article will detail the benefits and drawbacks of each strategy to help you choose the appropriate solution for your problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;By default React will try to render pages on the server. If the page contains static content, you can assume that it will be statically generated. If your page contains dynamic content, you’ll be able to choose between static generation (SSG) by using the getStaticProps method or server side rendering (SSR) with the getServerSideProps method. If your content can change, you can use Incremental Static Regeneration (ISR) to rebuild pages after a given interval. Each method will be reviewed in the rest of this article.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NextJS 13 updates bring a lot of change to the way the pages are built. However, the layout RFC is still in beta at the time of writing. The information of this article is still up-to-date if you’re not using the new layout.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;This article gives many and can be a bit lengthy. Here is a quick summary if you don’t want to read everything.&lt;/p&gt;
&lt;p&gt;Data type and stability is the ultimate determining factor when it comes to page building strategies. Understanding how your data can change is what will define the appropriate data-fetching and page-rendering method.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All pages without data fetching will be statically rendered&lt;/li&gt;
&lt;li&gt;If your content doesn’t change, it’s better to use Server Side Generation (SSG). It allows generating pages once (at build time) and great performances. This method is what’s recommended by the NextJS team.&lt;/li&gt;
&lt;li&gt;If your content change you have two options. The first one is to build the page at each request with Server Side Rendering (SSR), this can slow page speed but ensure that the data is fresh. The second option is to use Incremental Static Regeneration (ISR), it’s a process where pages are cached for a configured about of time and rebuilt once the cache is stale.&lt;/li&gt;
&lt;li&gt;Fetching data on the server isn’t always required. Statically building a page skeleton and fetching data on the client (using suspense) are also a viable solution in some use cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What’s the issue with React?&lt;/h2&gt;
&lt;p&gt;React is a front end framework that helps developer build Single Page Application (SPA). This is totally fine for building apps such as Asana or Discord but has its limitation when it comes to SEO and performance.&lt;/p&gt;
&lt;p&gt;By default, React app will download a large JavaScript file that contains all the codes (this file is called the bundle) that the browser needs to execute. Only after that the content of the page is displayed to the users. To speed performances it’s possible to split the bundle in multiple smaller files that can be downloaded separately.&lt;/p&gt;
&lt;p&gt;As you can imagine, having to download and execute code can take time and is a bad experience for the users. Having to wait is never fun! It would be nice if the server could send just HTML and CSS so the users directly have something to look at. The following diagram shows how this process happens for a classic React application.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;In the end that was done by every web technologies before the rise of SPA frameworks such as Angular, React and Vue. This could be seen as a step backwards. Which is true to a certain extent, but it has also allowed the creation of much more complex applications than what was done before.&lt;/p&gt;
&lt;p&gt;There are cases where using React Client Side rendering is fine and can be used. However you might face some limits if you want to have a website indexable by search engines or if you need better performances. That’s where frameworks that offers Static Generation comes to play. This article focus on NextJS but other frameworks such as &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;Gatsby&lt;/a&gt; or &lt;a href=&quot;https://astro.build/&quot;&gt;Astro&lt;/a&gt; does things in a somewhat similar manner.&lt;/p&gt;
&lt;h2&gt;NextJS Server Side Rendering (SSR)&lt;/h2&gt;
&lt;p&gt;Server Side Rendering (SSR) means that the page users access is generated at each request. Every customer will trigger the generation of a page and won’t share cache or page version with anybody else.&lt;/p&gt;
&lt;p&gt;Generating a page at each request can make sense in some scenarios. The nature of data that needs to be displayed is the determining factor. Using SSR can make sense when building an application that has geo-restricted content.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the content of the page depends on the request (location, authorization, …) then it makes sense to use SSR.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;How to use SSR&lt;/h3&gt;
&lt;p&gt;Using SSR is done by using the &lt;code&gt;getServerSideProps&lt;/code&gt; method on a page. Note that the methods must be placed on the page, placing this method anywhere else won’t work.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const Page = ({ data }) =&amp;gt; {
    // Render data...
};

// This gets called on every request
export async function getServerSideProps() {
    // Fetch data from external API
    const res = await fetch(`https://.../data`);
    const data = await res.json();

    // Pass data to the page via props
    return { props: { data } };
}

export default Page;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code present in the &lt;code&gt;getServerSideProps&lt;/code&gt; method will be executed at each request.&lt;/p&gt;
&lt;h3&gt;SSR timings&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Opening a page that has SSR is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The code in the &lt;code&gt;getServerSideProps&lt;/code&gt; method is executed and data is fetched.&lt;/li&gt;
&lt;li&gt;Once the data is fetched, NextJS will generate the page and prepare the assets&lt;/li&gt;
&lt;li&gt;The bundle in then sent to the browser. The server sends HTML, CSS and JS, this means that the browser is able to directly display the data coming from the server.&lt;/li&gt;
&lt;li&gt;Once the bundle downloaded, the browser displays the page and everything becomes active;&lt;/li&gt;
&lt;li&gt;Finally, NextJS needs to hydrate the page. Hydration is the process where React needs to connects the DOM with the virtual DOM it created.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is another schema on how the process happens&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Caveats&lt;/h3&gt;
&lt;p&gt;Even tho this method is supported by NextJS it’s not the one recommended on most cases in the documentation. Unless the nature of data requires generating the page at each request, a state’s approach is more suited in most cases.&lt;/p&gt;
&lt;p&gt;Executing the &lt;code&gt;getServerSideProps&lt;/code&gt; method at each request comes at the cost of speed. The browser won’t receive anything from the server until the method is finished. This blocking time can result in poorer experience for visitors and overall worsen web core vitals.&lt;/p&gt;
&lt;p&gt;Besides that, executing code each time requires compute. This compute can be an energy waste if another strategy such as SSG or ISR) is more suited. Even if the free tier of Vercel is quite generous, it’s not an excuse to run code for the sake of it.&lt;/p&gt;
&lt;h2&gt;NextJS Server Side Generation (SSG)&lt;/h2&gt;
&lt;p&gt;Server Side Generation (SSG) means generating the page once, at build time meaning when compiling the project, and using this page for every request until next deployment.&lt;/p&gt;
&lt;p&gt;This is the scenario NextJS recommends since it’s the one that offers the best performances but comes at the cost of data freshness. The compiled pages are hosted on CDN ensuring fast response regardless of the location of the location of the visitor.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the content of the page can be generated ahead of user’s request, then it makes sense to use SSG&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;How to use SSG&lt;/h3&gt;
&lt;p&gt;By default NextJS will try to statically generate pages. This means that if a page doesn’t have any content part the one from the page (if the content is hardcoded) then the page will be generated at build time.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const About = () =&amp;gt; {
  return &amp;lt;div&amp;gt;About&amp;lt;/div&amp;gt;
}

export default About

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If page content comes from an external source (a CMS for example) the &lt;code&gt;getStaticProps&lt;/code&gt; method needs to be used. This means that switching from SSR and SSG is as simple as changing the name of the method that fetches data.&lt;/p&gt;
&lt;p&gt;As for SSR, the &lt;code&gt;getStaticProps&lt;/code&gt; needs to be placed in the page itself and not on any other component. Placing the method anywhere else won’t work.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const Blog = ({ posts }) =&amp;gt; {
    // Render posts...
};

// This function gets called at build time
export async function getStaticProps() {
    // Call an external API endpoint to get posts
    const res = await fetch(&quot;https://.../posts&quot;);
    const posts = await res.json();

    // By returning { props: { posts } }, the Blog component
    // will receive `posts` as a prop at build time
    return {
        props: {
            posts,
        },
    };
}

export default Blog;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if the path of the pages depends on the data? Let’s say you’re building a blog. You might want to statically generate the pages so the pages are lightning fast. In that case you might want a URL looking like this &lt;code&gt;/blog/[slug]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;NextJS got you covered and you can use the &lt;code&gt;getStaticPaths&lt;/code&gt; that helps define all the pages to generate. The method returns an array and NextJS will loop over the array and execute the &lt;code&gt;getStaticProps&lt;/code&gt; of the page for each value in the array.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// This function gets called at build time
export async function getStaticPaths() {
    const res = await fetch(&quot;https://.../posts&quot;);
    const posts = await res.json();

    // Get the paths we want to pre-render based on posts
    const paths = posts.map((post) =&amp;gt; ({
        params: { slug: post.slug },
    }));

    return { paths, fallback: false };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;getStaticPaths&lt;/code&gt; allows the generation of all the dynamic pages that are required making it really easy to pre-render all he pages you want.&lt;/p&gt;
&lt;h3&gt;SSG timings&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Pages that are using SSG are built as follows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The project is built&lt;/li&gt;
&lt;li&gt;While being built all the &lt;code&gt;getStaticProps&lt;/code&gt; and &lt;code&gt;getStaticPaths&lt;/code&gt; methods are run.&lt;/li&gt;
&lt;li&gt;Once the data is fetched, the page is statically built&lt;/li&gt;
&lt;li&gt;Those pages are uploaded to the hosting service and can be served&lt;/li&gt;
&lt;li&gt;Visiting one of those pages is fast since everything is ready and there are no blocking times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is another schema on how the process happens&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Caveats&lt;/h3&gt;
&lt;p&gt;Serving statically generated pages is the method NextJS recommends. Building the pages once at build time and serving the same version is a great option.&lt;/p&gt;
&lt;p&gt;However, not all pages have static content. Some pages need to update regularly or have live updates of the data. In those use case, SSG is not adapted and other solutions should be used. For regular update ISR is more suited, for live update a mix of SSG and CSR is recommended by Next.&lt;/p&gt;
&lt;p&gt;Finally, NextJS always send some JavaScript when serving pages even if they are static. Each SSG page will have HTML, CSS and JS, Next then hydrate the page. The pages are thus bigger and alternative such as Astro is better suited if page size is critical.&lt;/p&gt;
&lt;h2&gt;NextJS Incremental Static Regeneration (ISR)&lt;/h2&gt;
&lt;p&gt;SSG biggest limitation is its static nature. There are cases where building once isn’t sufficient and updating the page on a regular basis is important.&lt;/p&gt;
&lt;p&gt;For that, NextJS supports Incremental Static Regeneration (ISR) that supports rebuilding pages without rebuilding the whole website. Adopting ISR is as simple as adding a parameter to a method!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the content of the page can be generated ahead of user’s request but need regular update, then ISR is for you&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;How to use ISR&lt;/h3&gt;
&lt;p&gt;ISR is very similar to SSG, only it can rebuild a page after a given delay. This is why ISR also uses the &lt;code&gt;getStaticProps&lt;/code&gt; and supports the &lt;code&gt;getStaticPaths&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;The only difference being the &lt;code&gt;revalidate&lt;/code&gt; parameter in the return of the &lt;code&gt;getStaticProps&lt;/code&gt;. This number in seconds indicates how much time is required in between builds.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export async function getStaticProps() {
  const res = await fetch(‘https://.../posts’)
  const posts = await res.json()

  return {
    props: {
      posts,
    },
    // Next.js will attempt to regenerate the page:
    // - When a request comes in
    // - At most once every 10 seconds
    revalidate: 10, // In seconds
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ISR is very powerful and can be used to incrementally build the pages of a website. Instead of building all pages at each deployment, it’s possible to only build a subset of them (the most popular pages for examples). All the pages that aren’t built will be gradually built as they are visited.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Besides that, data on the pages is still fresh and can be updated without any intervention. This also means that all pages will be the same during the cache period configured. There are cases where forcing an update is desired (when the data on a CMS change for example).&lt;/p&gt;
&lt;p&gt;On-demand revalidation is a mechanism that allows update of cached pages without having to redeploy a website. An API endpoint is required to make this work. The endpoint should be secured with a secret stored in environment variable to avoid unwanted access.&lt;/p&gt;
&lt;p&gt;The method is quite simple and acts as a web hook that can be fired by CMS when an entry is updated. In the method you check the secret, get the path to revalidate and force the revalidation with &lt;code&gt;res.revalidate&lt;/code&gt;. Once this is done, you can return a 200.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// pages/api/revalidate.js
export default async function handler(req, res) {
    // Check for secret to confirm this is a valid request
    if (req.query.secret !== process.env.MY_SECRET_TOKEN) {
        return res.status(401).json({ message: &quot;Invalid token&quot; });
    }

    try {
        // this should be the actual path not a rewritten path
        // e.g. for &quot;/blog/[slug]&quot; this should be &quot;/blog/post-1&quot;
        await res.revalidate(&quot;/path-to-revalidate&quot;);
        return res.json({ revalidated: true });
    } catch (err) {
        // If there was an error, Next.js will continue
        // to show the last successfully generated page
        return res.status(500).send(&quot;Error revalidating&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;ISR timings&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;ISR process is quite similar to what SSG do. The only exception is the regeneration that happens once a visitor has triggered it.&lt;/p&gt;
&lt;p&gt;The trigger is done when a user visits a page that is older than the configured time in the &lt;code&gt;validate&lt;/code&gt; parameter. &lt;strong&gt;This user will still get the old version of the page&lt;/strong&gt; and the following user will get the updated one.&lt;/p&gt;
&lt;p&gt;The rebuilding process is non-blocking and happens in the background. Users won’t even notice that the page updated.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Caveats&lt;/h3&gt;
&lt;p&gt;ISR takes some of the limitation SSG has and fix them by assuring a page that has fresh data. However, the data can get stale if it updates. Two options are then possible, either use on-demand revalidation or switch to CSR.&lt;/p&gt;
&lt;p&gt;Using on-demand revalidation is useful if the data doesn’t update too frequently or isn’t live. It makes sense to keep ISR and fast page speeds while forcing cache purging. If the data gets updated frequently, using a mix of SSG and CSR is an option. Part of the application can be statically generated and, using suspense, the data can be fetched from the client with a nice loading animation. Another option is to use SSR and fetch up -to-date information before rendering the page.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;NextJS offers many ways to manage page building. There is a scenario for every need depending on the type of data you want to display.&lt;/p&gt;
&lt;p&gt;The goal of this article was to review the currently supported methods. Things will dramatically change with the new layout but this feature is still in beta. I would recommend sticking with the current way of doing things as long as there is no stable release.&lt;/p&gt;
&lt;p&gt;I didn’t discuss about the edge and how middleware and other NextJS features can benefit from it. This is something that I intend to work on a separate article.&lt;/p&gt;
&lt;p&gt;I hope you found this information useful and now have a better understanding of the way pages are built in NextJS.&lt;/p&gt;
</content:encoded><author>Flavien Bonvin</author></item><item><title>8 Amazing NextJS Libraries That Make Coding Easier</title><link>https://flavien-bonvin.vercel.app/articles/amazing-nextjs-libraries-that-makes-coding-easier/</link><guid isPermaLink="true">https://flavien-bonvin.vercel.app/articles/amazing-nextjs-libraries-that-makes-coding-easier/</guid><description>8 amazing NextJS libraries (with 4 bonus) that will make your life easier and your web application better!</description><pubDate>Wed, 20 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;It’s a secret to few React developers that NextJS is an amazing product. It has been the default framework for building web app at my current company for the last two years and its adoption is rapidly increasing.&lt;/p&gt;
&lt;p&gt;Being able to control the way pages are built, where and when to fetch data is such a great experience.&lt;/p&gt;
&lt;p&gt;By default NextJS is remarkable but it’s just the start. React has a broad library ecosystem that NextJS project can also enjoy. In this article we’ll go through the default libraries, I use in all my projects.&lt;/p&gt;
&lt;h2&gt;Are libraries really necessary?&lt;/h2&gt;
&lt;p&gt;Before diving into the list, I want to address this question: “Are libraries really necessary? » Short answer? Yes, yes you need the help of libraries if you want to build, in a decent amount of time, a web application.&lt;/p&gt;
&lt;p&gt;You could be fine using solely NextJS if you’re building a simple portfolio composed of static pages and no user interaction. In that case, why bother with Next? Use plain HTML and CSS.&lt;/p&gt;
&lt;p&gt;Since this is not the use case most of you will be into I can confidently say that yes, you need libraries to both make your life easier and get the work done faster.&lt;/p&gt;
&lt;h2&gt;Things to consider before adding a library&lt;/h2&gt;
&lt;p&gt;As said before, installing libraries is normal and recommended. However, installing dozens of them isn’t.&lt;/p&gt;
&lt;p&gt;Every added library will require maintenance, updates are frequent and needs testing to ensure a working application. Besides, adding too many libraries could cause security issues or bloat your bundle.&lt;/p&gt;
&lt;p&gt;I’ll go through my decision process when it comes to choosing a library in a future article. Don’t hesitate to subscribe to the newsletter to get new articles right in your inbox.&lt;/p&gt;
&lt;p&gt;This is why I recommend to always take sometime before running &lt;code&gt;npm i&lt;/code&gt; and make a quick Google search to see if better alternatives exist (this applies for libraries presented here).&lt;/p&gt;
&lt;p&gt;Lastly, you have to keep in mind that a poor library choice could result if hundreds of wasted developer times. So better safe than sorry!&lt;/p&gt;
&lt;h2&gt;Libraries I install on every project&lt;/h2&gt;
&lt;p&gt;The following list is the libraries I install right when beginning a project.&lt;/p&gt;
&lt;h3&gt;TypeScript&lt;/h3&gt;
&lt;p&gt;Let’s start this list by something that isn’t a library but a programming language!&lt;/p&gt;
&lt;p&gt;Using TypeScript has become the default at my companies at the same time, we decided to move from React to NextJS. We haven’t looked back since.&lt;/p&gt;
&lt;p&gt;TypeScript can be summarized as a typed version of JavaScript. It allows developers to describe their data and help them write safer code. It’s amazing and can be incrementally integrated in projects.&lt;/p&gt;
&lt;p&gt;The following quick example shows how TypeScript codes look like. We have a simple Person that has some required fields and optional lastName and age.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;interface Person {
    firstName: string;
    lastName?: string; //optional data
    email: string;
    username: string;
    age?: number; //optional data
}

const getUserNameInfo = (person: Person) =&amp;gt; {
    // Causes an error, lastName could be undefined
    const lastNameLenght = person.lastName.length;
    // Causes an error, age could be undefined
    return `${person.username} is ${person.age &amp;gt; 18 ? &quot;adult&quot; : &quot;not adult&quot;}`;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code won’t compile since we have some errors that are commented in the code. This kind of protection is what makes your code safer and more enjoyable to work with!&lt;/p&gt;
&lt;p&gt;Doc: &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript: JavaScript With Syntax For Types.&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install typescript --save-dev
yarn add typescript --dev
pnpm add -D typescript
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;npm-check-updates&lt;/h3&gt;
&lt;p&gt;Second library on the list, second exception. I install this package globally since I used it for all my project and it doesn’t need to be in the projects themselves.&lt;/p&gt;
&lt;p&gt;This library helps find outdated packages and allow automatic or interactive updates. You can simply run &lt;code&gt;ncu&lt;/code&gt; to get a list of outdated packages. Once you know what’s available for upgrade you could either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Update everything automatically: &lt;code&gt;ncu -u&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update interactively only what you want: &lt;code&gt;ncu -i&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would personally recommend the interactive methods since you have to confirm if you want to update or not. The following images show how updates can be managed with ncu or with pnpm.&lt;/p&gt;
&lt;p&gt;Doc: &lt;a href=&quot;https://github.com/raineorshine/npm-check-updates&quot;&gt;GitHub - raineorshine/npm-check-updates: Find newer versions of package dependencies than what your package.json allow&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g npm-check-updates
yarn global add npm-check-updates

//pnpm has a built-in udpate feature
pnpm outdated
pnpm uppgrade -i
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Chakra-UI&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the most opinionated choice of the list, there are plenty of alternatives. Chakra-UI happens to be the library I enjoy the most working with.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I already discussed the benefits and things to consider before choosing a component library. For quite some time, we used Ant Design at my company but we switched to Chakra UI last year and are so happy with it!&lt;/p&gt;
&lt;p&gt;It’s true that the list of offered components are limited if we compare with competitors. That being said, the quality of the components, ease of customization and responsiveness support is what set this apart from the competition.&lt;/p&gt;
&lt;p&gt;Instead of relying on the Bootstrap column system for building UI. Chakra UI relies on developer CSS knowledge to build a responsive UI. There is a learning curve if you don’t have much experience with CSS but it’s not as steep as you might think.&lt;/p&gt;
&lt;p&gt;Besides, I assume that most developers have some CSS knowledge. If you want to perfect your Flexbox master, you can play Flexbox Froggy : &lt;a href=&quot;https://flexboxfroggy.com/&quot;&gt;Flexbox Froggy - A game for learning CSS flexbox&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Why not tailwind you might ask. That’s true that the framework is tempting but we decided to use Charka UI regardless. The team is more experienced with component libraries and having some elements prebuilt helps speed the development.&lt;/p&gt;
&lt;p&gt;Doc: &lt;a href=&quot;https://chakra-ui.com/&quot;&gt;Chakra UI - A simple, modular and accessible component library that gives you the building blocks you need to build your React applications. - Chakra UI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Instructions to install Chakra UI: &lt;a href=&quot;https://chakra-ui.com/getting-started&quot;&gt;Installation - Chakra UI&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;react-hook-form&lt;/h3&gt;
&lt;p&gt;Dealing why form is not the most enjoyable things to do. That’s why libraries exist to help in that regard. Two big names exist in the React ecosystem: react-hook-form and formik.&lt;/p&gt;
&lt;p&gt;After testing both we decided to go with react-hook-form since it offered everything formik did in an easier to read manner. Besides the team has a YouTube channel where all features are presented. You can check the content here: &lt;a href=&quot;https://www.youtube.com/channel/UC9qgXurGpQzePCx928oyIZg&quot;&gt;Avant d’accéder à YouTube&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can see in the following example how a very simple form can be implemented in plain HTML.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type FormData = {
  firstName: string;
  lastName: string;
  age: number;
};

const RegistrationForm = () =&amp;gt; {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm&amp;lt;FormData&amp;gt;();

  const onSubmit: SubmitHandler&amp;lt;FormData&amp;gt; = (data) =&amp;gt; console.log(data);

  return (
    &amp;lt;form onSubmit={handleSubmit(onSubmit)}&amp;gt;
      &amp;lt;input {...register(&quot;firstName&quot;)} /&amp;gt;
      &amp;lt;input {...register(&quot;lastName&quot;, { required: true })} /&amp;gt;
      {errors.lastName &amp;amp;&amp;amp; &amp;lt;p&amp;gt;Last name is required.&amp;lt;/p&amp;gt;}
      &amp;lt;input {...register(&quot;age&quot;, { pattern: /\d+/ })} /&amp;gt;
      {errors.age &amp;amp;&amp;amp; &amp;lt;p&amp;gt;Please enter number for age.&amp;lt;/p&amp;gt;}
      &amp;lt;input type=&quot;submit&quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
  );
};

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The library is powerful and is UI (component) library agnostic. This means that it works perfectly with Chakra UI. React-hook-form is so good that I now enjoy working with forms!&lt;/p&gt;
&lt;p&gt;Doc: &lt;a href=&quot;https://react-hook-form.com/&quot;&gt;Home | React Hook Form - Simple React forms validation&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i react-hook-form
yarn add react-hook-form
pnpm add react-hook-form
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;zod&lt;/h3&gt;
&lt;p&gt;I only discovered this library recently but it’s a game changer. For the longest time, I built classes with constructors. This meant that I had to manually parse and validate data coming from APIs.&lt;/p&gt;
&lt;p&gt;This is now long gone thanks to zod. At its core zod is a schema validation library. It takes whatever object you throw at it, make sure everything matches the defined schema and returns an object.&lt;/p&gt;
&lt;p&gt;This is great for form validation (but I prefer to use react-hook-form instead) but can also be used to “validate” data coming from an API. The following example shows how data can be schematized and parsed using zod.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export const userParse = z.object({
    id: z.string(),
    firstName: z.string().nullable(), // means string | null
    lastName: z.string().nullable(), // means string | null
    age: z.string().optional(), // means string | undefined
    email: z.string().email(), // mkes sure this is an email

    role: z.enum([&quot;user&quot;, &quot;admin&quot;]),
    favorites: z.string().array(),
});

//Can be used throughout the app as type
export type User = z.infer&amp;lt;typeof userParse&amp;gt;;

const getAllUsers = async (): Promise&amp;lt;User[] | null&amp;gt; =&amp;gt; {
    try {
        const data = await usersCollection.get();
        return data.docs.map((doc) =&amp;gt; FAQZod.parse({ ...doc.data(), id: doc.id }));
    } catch (e) {
        // handle errors
    }
    return null;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see using zod is quite simple and reduce the time to create data models down to the time it takes to describe it. Zod have built-in validation for every type it handles. This helps make sure that the data is present and in the appropriate format while giving comprehensive error messages.&lt;/p&gt;
&lt;p&gt;Documentation: &lt;a href=&quot;https://zod.dev&quot;&gt;Zod | Documentation&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i zod
yarn add zod
pnpm add zod
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;next-translate&lt;/h3&gt;
&lt;p&gt;Translating a website can be a pain. This is why I use for all my projects (even the one that might not be translated) an i18n library. The one I chose is called next-translate and perfectly integrates with NextJS SSR, SSG and ISR.&lt;/p&gt;
&lt;p&gt;While other options exist, I decided to go with next-translate since it’s easy to set-up and requires little boilerplate. It’s quite similar to next-i18n while keeping things simpler.&lt;/p&gt;
&lt;p&gt;Using a library compatible with NextJS is important since pages can be rendered on the server, generated at build time or on the client. Next-translate makes sure that the text is translated regardless of the strategy.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export default function ExamplePage() {
const { t, lang } = useTranslation(&apos;common&apos;)
const example = t(&apos;variable-example&apos;, { count: 42 })
    return &amp;lt;div&amp;gt;{example}&amp;lt;/div&amp;gt; // &amp;lt;div&amp;gt;Using a variable 42&amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doc: [GitHub - vinissimus/next-translate: Next.js plugin + i18n API for Next.js 🌍 - Load page translations and use them in an easy way!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i next-translate
yarn add next-translate
pnpm add next-translate
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;@next/bundle-analyzer&lt;/h3&gt;
&lt;p&gt;My colleagues often make fun of me because, after two hours of research, I managed to reduce the bundle size of a project by 10 KB. I admit that I get a kick out of hunting for this kind of optimization, it is still important to have a small bundle.&lt;/p&gt;
&lt;p&gt;A small bundle means better experience for users (most of the time) and helps reduce the amount of energy required at each request. On top of that, Google uses web vitals in its ranking algorithms so having a good score is great. It’s a win for everyone!&lt;/p&gt;
&lt;p&gt;@next/bundle-analyzer helps visualize how a library could weigh the bundle. It’s also a way to determine whether a library is good or could be replaced.&lt;/p&gt;
&lt;p&gt;That’s how I found that react-code-blocs was a poorly optimized library and that using react-syntax-highlight was better even tho it required more work to implement. I was able to reduce the bundle size by 28% for an application what wasn’t optimized simply by analyzing the output of @next/bundle-analyzer&lt;/p&gt;
&lt;p&gt;It’s worth mentioning that source-map-explorer can be used in parallel of @next/bundle-analyzer &lt;a href=&quot;https://github.com/danvk/source-map-explorer&quot;&gt;GitHub - danvk/source-map-explorer: Analyze and debug space usage through source maps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can read how I reduce my bundle size by 30% in this article: &lt;a href=&quot;https://www.flavienbonvin.com/reduce-next-js-bundle/&quot;&gt;How to easily reduce your NextJS bundle size by 30%?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Doc: &lt;a href=&quot;https://www.npmjs.com/package/@next/bundle-analyzer&quot;&gt;@next/bundle-analyzer - npm&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i next-translate
yarn add next-translate
pnpm add next-translate
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;next-compose-plugins&lt;/h3&gt;
&lt;p&gt;Next is configured with the &lt;code&gt;next.config.js&lt;/code&gt; file. While it’s possible to keep plugins low, things can get more complex as project scale.&lt;/p&gt;
&lt;p&gt;That’s why I use next-compose-plugins right from the beginning of any project. The library allows merging next config and plugins while keeping the configuration file readable.&lt;/p&gt;
&lt;p&gt;Here is what a config file looks like for a project where I have next-translate, bundleAnalyzer and plausible installed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const plausiblePlugin = withPlausibleProxy
const bundleAnalyzer = withBundleAnalyzer()

const nextConfig = {
    productionBrowserSourceMaps: process.env.APP_ENV === &apos;ANALYZE&apos;,
    i18n: {
        locales: [&apos;en&apos;, &apos;fr&apos;, &apos;de&apos;],
        defaultLocale: &apos;en&apos;,
        localeDetection: false
    },
    reactStrictMode: true,
    images: {
        formats: [&apos;image/avif&apos;, &apos;image/webp&apos;],
        domains: [...]
    }
}

const plugins = [nextTranslate, plausiblePlugin]
process.env.APP_ENV === &apos;ANALYZE&apos; &amp;amp;&amp;amp; plugins.push(bundleAnalyzer)
module.exports = withPlugins(plugins, nextConfig)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doc: [GitHub - cyrilwanner/next-compose-plugins: 💡next-compose-plugins provides a cleaner API for enabling and configuring plugins for next.js&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i next-compose-plugins
yarn add next-compose-plugins
pnpm add next-compose-plugins
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2&gt;Libraries I install if needed&lt;/h2&gt;
&lt;p&gt;That’s all for the libraries I use by default on all the project I work on. There are however other options that I go to depending on the project requirements.&lt;/p&gt;
&lt;h3&gt;swr&lt;/h3&gt;
&lt;p&gt;There are no libraries that makes data fetching easier than SWR. The solution works regardless of the backend used and supports SSR, ISR and SSG.&lt;/p&gt;
&lt;p&gt;One line of code is all it takes to handle loading, error and resolving states. You can then focus on handling those different states and don’t have to worry about managing the request.&lt;/p&gt;
&lt;p&gt;A request made with SWR will first serve a stale (or cached) version of the data while making the request in the background. Once the request resolved, the UI is updated without the user noticing anything.&lt;/p&gt;
&lt;p&gt;That’s the core concept but the library also supports revalidation on focus or network recovery, local mutation for lightning fast UI updates, pagination with state updates,…&lt;/p&gt;
&lt;p&gt;The following snippet shows how a simple request on an API can be done using SWR.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const fetcher = (...args) =&amp;gt; fetch(...args).then((res) =&amp;gt; res.json());

const Profile = () =&amp;gt; {
  const { data, error } = useSWR(&quot;/api/user/123&quot;, fetcher);
  if (error) return &amp;lt;div&amp;gt;failed to load&amp;lt;/div&amp;gt;;
  if (!data) return &amp;lt;div&amp;gt;loading...&amp;lt;/div&amp;gt;;

  // render data
  return &amp;lt;div&amp;gt;hello {data.name}!&amp;lt;/div&amp;gt;;
};

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doc: &lt;a href=&quot;https://swr.vercel.app/&quot;&gt;React Hooks for Data Fetching – SWR&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i swr
yarn add swr
pnpm add swr
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;zustand&lt;/h3&gt;
&lt;p&gt;As project scales so do application state. React offers an amazing library called Context and can work in most of the cases.&lt;/p&gt;
&lt;p&gt;However there are times where the application size gets too big or when wrapping your app in another provider makes no sense. This is where state management libraries come into play.&lt;/p&gt;
&lt;p&gt;There are some big players such as Redux. However, they are quite confusing and requires a lot of boilerplate code. As you might have guessed, I don’t like to write code to make my library’s work.&lt;/p&gt;
&lt;p&gt;I immediately fall in love with Zustand as declaring a global state is as simple as creating a JavaScript object. Once this is done the store is available throughout the application.&lt;/p&gt;
&lt;p&gt;You can even save the store data in the local storage of the computer for easy recovery on next visit.&lt;/p&gt;
&lt;p&gt;Here is the example they have on their git page, simple and efficient to build a global state!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import create from &quot;zustand&quot;;

const useStore = create((set) =&amp;gt; ({
  bears: 0,
  increasePopulation: () =&amp;gt; set((state) =&amp;gt; ({ bears: state.bears + 1 })),
  removeAllBears: () =&amp;gt; set({ bears: 0 }),
}));

const BearCounter = () =&amp;gt; {
  const bears = useStore((state) =&amp;gt; state.bears);
  return &amp;lt;h1&amp;gt;{bears} around here ...&amp;lt;/h1&amp;gt;;
};

const Controls = () =&amp;gt; {
  const increasePopulation = useStore((state) =&amp;gt; state.increasePopulation);
  return &amp;lt;button onClick={increasePopulation}&amp;gt;one up&amp;lt;/button&amp;gt;;
};

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why is this library not in the default ? Because it shouldn’t be used by default to store global data. Instead I recommend working with the Context API and only use Zustand if things start to get hairy.&lt;/p&gt;
&lt;p&gt;Doc: [GitHub - pmndrs/zustand: 🐻 Bear necessities for state management in React&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i zustand
yarn add zustand
pnpm add zustand
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Lodash&lt;/h3&gt;
&lt;p&gt;Lodash offers plenty of methods that make developers life easier. Ranging from testing if a value is truly empty to merging nested object Lodash can do nearly everything.&lt;/p&gt;
&lt;p&gt;However I don’t feel like it should be installed on every project. Nothing wrong with it but using it can be easily replaced by some helpers functions or with TypeScript.&lt;/p&gt;
&lt;p&gt;You don’t have to rely on a library if all it offers is 10 one-liners. Build them yourself, you might even enjoy doing it. If you don’t feel like it, you can check &lt;a href=&quot;https://1loc.dev/&quot;&gt;Favorite JavaScript utilities in single lines of code - 1 LOC&lt;/a&gt; to get some inspiration.&lt;/p&gt;
&lt;p&gt;Besides, Lodash can have a massive impact on bundle size if not imported properly. I discussed that in my NextJS bundle size optimization article.&lt;/p&gt;
&lt;p&gt;Doc: &lt;a href=&quot;https://lodash.com/&quot;&gt;Lodash&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i lodash
yarn add lodash
pnpm add lodash
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;dayJS&lt;/h3&gt;
&lt;p&gt;Last library, date management. I agree that date can be a pain to work with and that libraries such as dayJS offer plenty of features that help developers.&lt;/p&gt;
&lt;p&gt;However, not all date problems need a library to be solved. The plain Date objects get some improvements and it’s easier to work with. So instead of installing DayJS when all you need to do is format a date, check this article that contains all you need to know about them: &lt;a href=&quot;https://css-tricks.com/everything-you-need-to-know-about-date-in-javascript/&quot;&gt;Everything You Need to Know About Date in JavaScript | CSS-Tricks - CSS-Tricks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally, please stop using MomentJS as even the developers of the library don’t recommend it for a new project. The library is dead and will only receive bug fix updates. https://momentjs.com/docs/#/-project-status/&lt;/p&gt;
&lt;p&gt;Doc: &lt;a href=&quot;https://day.js.org/&quot;&gt;Day.js · 2KB JavaScript date utility library&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i dayjs
yarn add dayjs
pnpm add dayjs
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Final recommendations&lt;/h2&gt;
&lt;p&gt;Here is the list of my go-to libraries when building simple and more complex applications. There is quite a lot of information in this article. I wanted to make an opinionated list for developers that might want to get help to kickstart their journey or engage in a discussion with more experienced one.&lt;/p&gt;
&lt;p&gt;One of the key elements is to keep the number of libraries low. As said in the beginning, updates are frequent and breaking changes occurs more often than we think.&lt;/p&gt;
&lt;p&gt;On top of that, having fewer libraries should resolve in smaller bundles, better performances for both the user and for SEO. While it could take a bit more time for a developer to write its code (and that’s debatable), the end result will benefit everybody.&lt;/p&gt;
&lt;p&gt;Finally, I have one last piece of advice. Once you’ve installed a library and started to use it, please read the documentation. Not because you’re using it wrong but rather because you might find interesting features or better way to do things. Besides, it’s quite frequent to have developers giving advice or directives on how to do things right with their libraries.&lt;/p&gt;
&lt;p&gt;That’s all I have, do you have any other libraries that I didn’t cover in this article and that are worth discussing?&lt;/p&gt;
</content:encoded><author>Flavien Bonvin</author></item><item><title>How to easily reduce your NextJS bundle size by 30%?</title><link>https://flavien-bonvin.vercel.app/articles/reduce-next-js-bundle/</link><guid isPermaLink="true">https://flavien-bonvin.vercel.app/articles/reduce-next-js-bundle/</guid><description>Reducing your NextJS bundle by 30% is possible. Here are four ways to help you slim your project down!</description><pubDate>Mon, 04 Apr 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;NextJS performances are pretty good out of the box. The framework supports code spitting and tries to create the most petite bundle possible.&lt;/p&gt;
&lt;p&gt;However, as the project grows, so does the bundle. Next will still attempt to have a small bundle, but it cannot fix a poor implementation.&lt;/p&gt;
&lt;p&gt;The list of defendants can vary depending on the size of the app. This article will focus on the following points: lodash imports, dependencies updates, proper methods, and components imports and dependencies optimization.&lt;/p&gt;
&lt;p&gt;The end goal is to reduce the bundle size and have something as small as possible to make users and robots happy.&lt;/p&gt;
&lt;h2&gt;Creating a baseline&lt;/h2&gt;
&lt;p&gt;Before doing any optimization, it’s best to start with a baseline. Having a base number is excellent since you’ll be able to see the effects of your actions. Besides, it helps justify the time you spent on this task that might look useless to the untrained eye.&lt;/p&gt;
&lt;p&gt;I’ll be using a project we are working on at my current work since it didn’t see any optimization and is still reasonably straightforward. The project is built using NextJS 12, Chakra-UI, Fontawesome and contains many dependencies such as Lodash, DayJS, Mixpanel, Google Analytics…&lt;/p&gt;
&lt;p&gt;To help with the analysis, I’ll be using the following dependencies and packages to analyze and visualize my bundle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cyrilwanner/next-compose-plugins&quot;&gt;GitHub - cyrilwanner/next-compose-plugins: 💡next-compose-plugins provides a cleaner API for enabling and configuring plugins for next.js &lt;/a&gt;that helps manage plugins on next config file&lt;/li&gt;
&lt;li&gt;https://github.com/josselinbuils/next-bundle-analyzer that will chart the bundle so we can see what takes space.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/danvk/source-map-explorer&quot;&gt;GitHub - danvk/source-map-explorer: Analyze and debug space usage through source maps&lt;/a&gt;: helps visualize more precisely the content of the bundle. . This package can be globally installed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is my current NextJS config file at the beginning of my investigations. Note that we’ll enable the source maps on the production of analysis, but this should be removed at the end.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const withPlugins = require(&quot;next-compose-plugins&quot;);
const { withPlausibleProxy } = require(&quot;next-plausible&quot;);
const withBundleAnalyzer = require(&quot;@next/bundle-analyzer&quot;);

const plausiblePlugin = withPlausibleProxy;
const bundleAnalyzer = withBundleAnalyzer({ enabled: process.env.ANALYZE === &quot;true&quot; });

const nextConfig = {
    productionBrowserSourceMaps: true,
    i18n: {
        locales: [&quot;en&quot;, &quot;fr&quot;, &quot;de&quot;],
        defaultLocale: &quot;fr&quot;,
        localeDetection: false,
    },
    reactStrictMode: true,
    images: {
        formats: [&quot;image/avif&quot;, &quot;image/webp&quot;],
        domains: [&quot;uploads-ssl.webflow.com&quot;, &quot;images.unsplash.com&quot;],
    },
};

module.exports = withPlugins([plausiblePlugin, bundleAnalyzer], nextConfig);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use the next-bundle-analyzer library, we have to add the following command on the package.json: &lt;code&gt;&quot;analyze&quot;: &quot;ANALYZE=true next build&quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It’s now possible to run the following commands to have the initial baseline:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pnpm run build&lt;/code&gt;: build the project and give information about the first JS load.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pnpm run analyze&lt;/code&gt;: will give a general idea of the repartition of the bundle.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source-map-explorer .next/static//.js&lt;/code&gt;: more in-depth information about the package.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are the numbers in my case:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.23 MB bundle size with analyzing&lt;/li&gt;
&lt;li&gt;2.08 MB bundle size with source maps&lt;/li&gt;
&lt;li&gt;656 kB loaded with 1.9 MB resources on network inspector&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On top of those numbers, I ran web.dev/measure tests 5 times to have an average performance score to see if we make any real-world improvements or if it’s just a smokescreen. I got an average of 69.2.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;Improving lodash imports&lt;/h2&gt;
&lt;p&gt;Loads is a pretty standard library, and the chances that it’s lying around in your project are pretty high. With 48 million downloads per week, the library is prevalent, and using it properly is critical and a fast fix.&lt;/p&gt;
&lt;p&gt;The following image shows how optimizing imports can significantly impact the size of the files. There is a 10x factor depending on the method used when importing methods.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import _ from &quot;lodash&quot;; // 73,13kB (gzip: 25,43kB)
import { isEmpty } from &quot;lodash&quot;; // 73,14kB (gzip: 25,43kB)
import isEmpty from &quot;lodash/isEmpty&quot;; // 7,04kB (gzip: 2,26)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We used the second method in our project since we thought it was better to do it. Changing imports is pretty fast, and it only took 5 minutes to make the change in the project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.17 MB bundle size with analyzing -2.691%&lt;/li&gt;
&lt;li&gt;2.02 MB bundle size with source maps -2.885%&lt;/li&gt;
&lt;li&gt;69.2 as average performance score 0&lt;/li&gt;
&lt;li&gt;632 kB loaded with 1.8 MB resources on network inspector -3.659%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The changes are pretty marginal, but so is the effort, and this is why taking the time to make the improvements in the first recommended list.&lt;/p&gt;
&lt;h2&gt;Use dynamic imports for non-essential UI elements&lt;/h2&gt;
&lt;p&gt;As said before, Next supports ES2020 dynamic imports. Instead of focusing on the server methods, this time, we’ll concentrate on dynamically importing the components that aren’t continuously displayed.&lt;/p&gt;
&lt;p&gt;A modal, an error warning, and a function only triggered with user interaction are all elements that aren’t required by default. Dynamic imports provide a simple way to handle those cases.&lt;/p&gt;
&lt;p&gt;The rule is pretty simple. Everything that is conditionally displayed can be dynamically imported. Look for all the &lt;code&gt;{VARIABLE &amp;amp;&amp;amp; …&lt;/code&gt; in your code, and you should see some components that can be changed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const ServiceBadge = dynamic(() =&amp;gt; import(‘../Molecules/ServiceBadge’))

const ServiceHeader = ({service, title}: Props) =&amp;gt; {
  const router = useRouter()
  const isMobile = useBreakpointValue([true, null, false], ‘base’)

  return (
    &amp;lt;HStack&amp;gt;
      &amp;lt;BackButton onClick={() =&amp;gt; router.replace(ROUTE_ROOT)} /&amp;gt;
      {isMobile &amp;amp;&amp;amp; &amp;lt;ServiceBadge {…service} /&amp;gt;}
      &amp;lt;Heading&amp;gt;{title}&amp;lt;/Heading&amp;gt;
    &amp;lt;/HStack&amp;gt;
  )
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Besides, look at the methods that are executed on user inputs. Imports what they need inside them instead of at the top of the file. This way, you’ll only load the methods when you need them instead of every time.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const handleLogout = async () =&amp;gt; {
    await supabase.auth.signOut();
    setUser(null);
    const showToast = await import(&quot;../../utils/showToast&quot;).then((mod) =&amp;gt; mod.showToast);
    showToast(keys.logout_success, &quot;success&quot;);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;2.21 MB bundle size with analyzing +1.843%&lt;/li&gt;
&lt;li&gt;2.06 MB bundle size with source maps +1.980%&lt;/li&gt;
&lt;li&gt;72 as average performance score +2.2&lt;/li&gt;
&lt;li&gt;568 kB loaded with 1.6 MB resources on network inspector -10.127%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dynamically importing the components has an enormous impact on the size of the loaded JS when opening the website. This simple change reduced the initial load by 10%, which is significant.&lt;/p&gt;
&lt;p&gt;The reduction alone explains why the performance score improved by more than 2.2 points. Using dynamics imports definitely helps, and the result will be even more significant with a more complex page.&lt;/p&gt;
&lt;h2&gt;Analyze the bundle&lt;/h2&gt;
&lt;p&gt;This step is the one that can have the most significant impact, and it’s also the one that can take the longest time since it will depend on many factors. Thanks to the bundle-analyzer and source-map-explorer, we have a clear view of what’s happening in the bundle and what could be changed.&lt;/p&gt;
&lt;p&gt;There are two places to look at at this stage: if there is a large file imported and if there are a lot of small files. I don’t know how much an optimized bundle should weigh or how many files it should contain. For sure, both numbers should be as small as possible.&lt;/p&gt;
&lt;p&gt;During my investigation, I discovered that some libraries were extensive and that react-syntax-highlight had a lot of files that were taking up a lot of space. You can see them in the following screenshots.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The analysis told me that I have to look at some libraries: validator, framer, mixpanel, fontawesome, and react-code-blocs.&lt;/p&gt;
&lt;p&gt;I won’t go into too many details in this article, but here is a quick summary of what I did for every library:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;validator: changed the way I import methods and use lodash &lt;code&gt;isEmpty&lt;/code&gt; instead of the one from validator.&lt;/li&gt;
&lt;li&gt;framer: did some vanilla animation for more specific elements and kept everything as it is for the more complex one.&lt;/li&gt;
&lt;li&gt;mixpanel: removed the dependency since the data wasn’t used, and we had other tools for that&lt;/li&gt;
&lt;li&gt;fontawesome: sadly, I wasn’t able to reduce the size of the imports&lt;/li&gt;
&lt;li&gt;react-code-blocs: removed the library and directly used react-syntax-highlight instead since it was possible to only import what was required.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides those actions, I did some library cleaning and replaced them with vanilla TypeScript since they didn’t provide much improvement. I also took the time to update everything to its latest version in hopes of gains.&lt;/p&gt;
&lt;p&gt;Finally, I performed some code analysis and removed the old and unused code. This step might not yield a smaller bundle, but it’s definitely positive for code quality and ease of use.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1,59 MB bundle size with analyzing -28,054%&lt;/li&gt;
&lt;li&gt;1,45 MB bundle size with source maps -29,612%&lt;/li&gt;
&lt;li&gt;73 as average performance score +1&lt;/li&gt;
&lt;li&gt;489 kB loaded with 1,3MB resources on network inspector -13,908%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had a feeling that this step would be the one that brought the most results, but I wasn’t expecting such an improvement! Shaving 30% of the bundle size by simply making smarter choices when it comes to library selection of feature implementation seems crazy.&lt;/p&gt;
&lt;h2&gt;Do Not Use Server Data in useEffects&lt;/h2&gt;
&lt;p&gt;Next offers the possibility of fetching data on the server and using it on the client. This helps speed the page since data bandwidth is probably faster than your internet connection. Besides, having the data on page loads reduces the number of network calls.&lt;/p&gt;
&lt;p&gt;Next, even offer the option to do incremental static generation, and it’s a feature I highly recommend since it allows near-instant page load while ensuring that data is fresh.&lt;/p&gt;
&lt;p&gt;Getting data from the server on page loads or page build is excellent. However, it would be a shame to ruin those efforts and manipulate (or set a state) on the client.&lt;/p&gt;
&lt;p&gt;Doing so means that the UI will be updated on the client where it should have been done on the server. This can result in a layout shift or poor performance.&lt;/p&gt;
&lt;p&gt;Consider the following example. We fetch articles on the server, incrementally regenerate the page every 15 minutes (thanks to the &lt;code&gt;revalidate: 900&lt;/code&gt; code).&lt;/p&gt;
&lt;p&gt;However, we have a useEffect which is guaranteed to run on the client that sets a state where the article is saved. This is bad since Next won’t be able to build this page and have it pre-generated.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export const getStaticProps = async () =&amp;gt; {
  const fetchExamplePosts = (await import(&apos;./api/example-posts&apos;)).fetchExamplePosts
  const exampleArticles = await fetchExamplePosts()

  return {
    props: {
      exampleArticles,
      revalidate: 900,
    },
  }
}

const DisplayArticles = ({exampleArticles}) =&amp;gt; {
  const [article, setArticle] = useState()

  useEffect(() =&amp;gt; {
    setArticle(exampleArticles)
  }, [])

  return (
    &amp;lt;div&amp;gt;
      {!isEmpty(article) &amp;amp;&amp;amp;
        JSON.parse(article).map(post =&amp;gt; {
          const temp = new ExamplePost(...post)
          return (
            &amp;lt;&amp;gt;
              &amp;lt;img src={temp.image} alt=&apos;&apos; /&amp;gt;
              &amp;lt;p&amp;gt;{temp.nameEn}&amp;lt;/p&amp;gt;
            &amp;lt;/&amp;gt;
          )
        })}
    &amp;lt;/div&amp;gt;
  )
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead, this is what should have been done. Directly access the data in the return statement, and the article will be present when the page is built on the server. Besides, this will benefit the performance score since the Cumulative Layout Shift will be reduced.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export const getStaticProps = async () =&amp;gt; {
  const fetchExamplePosts = (await import(&apos;./api/example-posts&apos;)).fetchExamplePosts
  const exampleArticles = await fetchExamplePosts()

  return {
    props: {
      exampleArticles,
      revalidate: 900,
    },
  }
}

const DisplayArticles = ({exampleArticles}) =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      {!isEmpty(exampleArticles) &amp;amp;&amp;amp;
        JSON.parse(exampleArticles).map(post =&amp;gt; {
          const temp = new ExamplePost(...post)
          return (
            &amp;lt;&amp;gt;
              &amp;lt;img src={temp.image} alt=&apos;&apos; /&amp;gt;
              &amp;lt;p&amp;gt;{temp.nameEn}&amp;lt;/p&amp;gt;
            &amp;lt;/&amp;gt;
          )
        })}
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One last note: it’s expected that some data must be manipulated on the client. However, there are cases where the data is fetched from an API and displayed (as it’s the case in the above examples. In those cases, please don’t manipulate the data on the client and directly display it si it will be present on page loads.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The following table shows how our different actions impacted the bundle size or the performance score. Not every step has the same impact, and the results you might experience will significantly vary.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;There are two apparent winners, using dynamic imports for UI elements that aren’t displayed by default and investigating the libraries that weigh down the bundle.&lt;/p&gt;
&lt;p&gt;Dynamic imports are an excellent NextJS feature, and it allows for a more minor downloaded javascript. It was possible to reduce by 64 kB the JavaScript downloaded when loading the homepage, and the difference can be even more significant for more complex pages resulting in a near-instant page load.&lt;/p&gt;
&lt;p&gt;Analyzing the bundle is by far the task that took me the longest. Fixing some libraries can result in lib change, making things harder. It’s important to stay rational and not spend countless hours trying to remove one library your project depends too much on.&lt;/p&gt;
&lt;p&gt;I have to admit that improving lodash imports had a marginal impact. However, the size change will be dependent on how much the library is used on your project. Besides, it’s a quick job, and it would be a shame to not keep the old imports.&lt;/p&gt;
&lt;p&gt;The investigations I conducted were quite exciting and helped me understand many things regarding Next and bundling. It was a fantastic learning experience that will benefit my team and our customer. I can already see room elements that have to change so we can deliver even faster websites!&lt;/p&gt;
&lt;p&gt;I hope you find exciting elements and that you’ll be able to reduce the loading time of your website! Don’t hesitate to share other tips that I didn’t cover in this article. You can also register for my newsletter to receive an email when I publish a new article!&lt;/p&gt;
</content:encoded><author>Flavien Bonvin</author></item></channel></rss>